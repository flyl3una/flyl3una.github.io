<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>L3una&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.flyl3una.cc/"/>
  <updated>2019-10-28T09:14:52.460Z</updated>
  <id>http://www.flyl3una.cc/</id>
  
  <author>
    <name>L3una</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>pexpect执行长命令</title>
    <link href="http://www.flyl3una.cc/2019/10/28/pexpect%E6%89%A7%E8%A1%8C%E9%95%BF%E5%91%BD%E4%BB%A4/"/>
    <id>http://www.flyl3una.cc/2019/10/28/pexpect执行长命令/</id>
    <published>2019-10-28T08:52:20.000Z</published>
    <updated>2019-10-28T09:14:52.460Z</updated>
    
    <content type="html"><![CDATA[<p><code>python</code>有一个<code>pexpect</code>工具可以很方便的用来执行系统交互式操作。pexpect如何使用则不详细讲解了，此文主要讲解使用<code>pexpect</code>库执行长命令时遇到的问题。</p><a id="more"></a><h1 id="pexpect工具登陆远程目标方法分析"><a href="#Pexpect工具登陆远程目标方法分析" class="headerlink" title="Pexpect工具登陆远程目标方法分析"></a>Pexpect工具登陆远程目标方法分析</h1><p>在平常使用<code>pexpect</code>来执行一些比较长的命令时，若终端太小，长命令会提示more并需要交互式翻页，此类操作比较麻烦，并且得到的结果中去除<code>more</code>这一行提示符也会比较麻烦。所以想到设置终端大小来解决这个问题。</p><p>由于<code>pexpect</code>文档上并没有说明<code>pexpect</code>设置终端大小的方法，网上也没有找到类似文档，此时源码就是最好的文档。</p><h2 id="跟进pexpect库"><a href="#跟进pexpect库" class="headerlink" title="跟进pexpect库"></a>跟进pexpect库</h2><p>在使用<code>pexpect</code>时，<code>pexpect</code>使用<code>spawn</code>创建对象。故而可以从此处进行分析。</p><p>打开<code>pexpect.__init__.py</code>文件可以看到<code>spawn</code>其实使用的是<code>pexpect.pty_spawn</code>文件中的<code>spawn</code>函数。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">PY3 = (sys.version_info[<span class="number">0</span>] &gt;= <span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .exceptions <span class="keyword">import</span> ExceptionPexpect, EOF, TIMEOUT</span><br><span class="line"><span class="keyword">from</span> .utils <span class="keyword">import</span> split_command_line, which, is_executable_file</span><br><span class="line"><span class="keyword">from</span> .expect <span class="keyword">import</span> Expecter, searcher_re, searcher_string</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> sys.platform != <span class="string">'win32'</span>:</span><br><span class="line">    <span class="comment"># On Unix, these are available at the top level for backwards compatibility</span></span><br><span class="line">    <span class="keyword">from</span> .pty_spawn <span class="keyword">import</span> spawn, spawnu</span><br><span class="line">    <span class="keyword">from</span> .run <span class="keyword">import</span> run, runu</span><br><span class="line"></span><br><span class="line">__version__ = <span class="string">'4.7.0'</span></span><br><span class="line">__revision__ = <span class="string">''</span></span><br><span class="line">__all__ = [<span class="string">'ExceptionPexpect'</span>, <span class="string">'EOF'</span>, <span class="string">'TIMEOUT'</span>, <span class="string">'spawn'</span>, <span class="string">'spawnu'</span>, <span class="string">'run'</span>, <span class="string">'runu'</span>,</span><br><span class="line">           <span class="string">'which'</span>, <span class="string">'split_command_line'</span>, <span class="string">'__version__'</span>, <span class="string">'__revision__'</span>]</span><br></pre></td></tr></table></figure></p><h2 id="跟进pty_spawn类"><a href="#跟进pty-spawn类" class="headerlink" title="跟进pty_spawn类"></a>跟进pty_spawn类</h2><p>查看<code>pty_spawn</code>文件可以看到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spawn</span><span class="params">(SpawnBase)</span>:</span></span><br><span class="line">    <span class="string">'''This is the main class interface for Pexpect. Use this class to start</span></span><br><span class="line"><span class="string">    and control child applications. '''</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># This is purely informational now - changing it has no effect</span></span><br><span class="line">    use_native_pty_fork = use_native_pty_fork</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, command, args=[], timeout=<span class="number">30</span>, maxread=<span class="number">2000</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                 searchwindowsize=None, logfile=None, cwd=None, env=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 ignore_sighup=False, echo=True, preexec_fn=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 encoding=None, codec_errors=<span class="string">'strict'</span>, dimensions=None,</span></span></span><br><span class="line"><span class="function"><span class="params">                 use_poll=False)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        ......</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">        The maxread attribute sets the read buffer size. This is maximum number</span></span><br><span class="line"><span class="string">        of bytes that Pexpect will try to read from a TTY at one time. Setting</span></span><br><span class="line"><span class="string">        the maxread size to 1 will turn off buffering. Setting the maxread</span></span><br><span class="line"><span class="string">        value higher may help performance in cases where large amounts of</span></span><br><span class="line"><span class="string">        output are read back from the child. This feature is useful in</span></span><br><span class="line"><span class="string">        conjunction with searchwindowsize.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        When the keyword argument *searchwindowsize* is None (default), the</span></span><br><span class="line"><span class="string">        full buffer is searched at each iteration of receiving incoming data.</span></span><br><span class="line"><span class="string">        The default number of bytes scanned at each iteration is very large</span></span><br><span class="line"><span class="string">        and may be reduced to collaterally reduce search cost.  After</span></span><br><span class="line"><span class="string">        :meth:`~.expect` returns, the full buffer attribute remains up to</span></span><br><span class="line"><span class="string">        size *maxread* irrespective of *searchwindowsize* value.</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">            The dimensions attribute specifies the size of the pseudo-terminal as</span></span><br><span class="line"><span class="string">        seen by the subprocess, and is specified as a two-entry tuple (rows,</span></span><br><span class="line"><span class="string">        columns). If this is unspecified, the defaults in ptyprocess will apply.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">        The use_poll attribute enables using select.poll() over select.select()</span></span><br><span class="line"><span class="string">        for socket handling. This is handy if your system could have &gt; 1024 fds</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        super(spawn, self).__init__(timeout=timeout, maxread=maxread, searchwindowsize=searchwindowsize,</span><br><span class="line">                                    logfile=logfile, encoding=encoding, codec_errors=codec_errors)</span><br><span class="line">        ...</span><br><span class="line">        self._spawn(command, args, preexec_fn, dimensions)</span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>此时可以看到参数中的<code>maxread</code>默认为2000，此值可以设置从伪终端一次最大的接收数据缓冲区大小。参数中有一个<code>dimensions</code>字段。从注释中可以了解到此字段可以设置伪终端的大小，如果不指定则使用<code>ptyprocess</code>中的默认值。并且<code>dimensions</code>传给了<code>self._spawn</code>方法，根据<code>self._spawn</code>方法。</p><h2 id="spawn创建连接"><a href="#spawn创建连接" class="headerlink" title="spawn创建连接"></a>spawn创建连接</h2><p>查看self._spawn方法描述</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_spawn</span><span class="params">(self, command, args=[], preexec_fn=None, dimensions=None)</span>:</span></span><br><span class="line">        <span class="string">'''This starts the given command in a child process. This does all the</span></span><br><span class="line"><span class="string">        fork/exec type of stuff for a pty. This is called by __init__. If args</span></span><br><span class="line"><span class="string">        is empty then command will be parsed (split on spaces) and args will be</span></span><br><span class="line"><span class="string">        set to parsed arguments. '''</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">if</span> dimensions <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            kwargs[<span class="string">'dimensions'</span>] = dimensions</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> self.encoding <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">        <span class="comment"># Encode command line using the specified encoding</span></span><br><span class="line">        self.args = [a <span class="keyword">if</span> isinstance(a, bytes) <span class="keyword">else</span> a.encode(self.encoding)</span><br><span class="line">                     <span class="keyword">for</span> a <span class="keyword">in</span> self.args]</span><br><span class="line"></span><br><span class="line">    self.ptyproc = self._spawnpty(self.args, env=self.env,</span><br><span class="line">                                 cwd=self.cwd, **kwargs)</span><br><span class="line">                                 </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_spawnpty</span><span class="params">(self, args, **kwargs)</span>:</span></span><br><span class="line">    <span class="string">'''Spawn a pty and return an instance of PtyProcess.'''</span></span><br><span class="line">    <span class="keyword">return</span> ptyprocess.PtyProcess.spawn(args, **kwargs)</span><br></pre></td></tr></table></figure><p>可以看到<code>dimensions</code>被设置到<code>kwargs</code>中后传递给了<code></code>self._spawnpty方法，然后查看<code>self._spawnpty</code>方法可以看到返回了一个<code>ptyprocess.PtyProcess.spawn</code>创建的对象，并且将<code>dimensions</code>参数传给了此对象。</p><h2 id="对ptyprocess的调用"><a href="#对ptyprocess的调用" class="headerlink" title="对ptyprocess的调用"></a>对ptyprocess的调用</h2><p>跟进<code>ptyprocess.PtyProcess.spawn</code>方法。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@classmethod</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">spawn</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">        cls, argv, cwd=None, env=None, echo=True, preexec_fn=None,</span></span></span><br><span class="line"><span class="function"><span class="params">        dimensions=<span class="params">(<span class="number">24</span>, <span class="number">80</span>)</span>)</span>:</span></span><br><span class="line">    <span class="string">'''Start the given command in a child process in a pseudo terminal.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This does all the fork/exec type of stuff for a pty, and returns an</span></span><br><span class="line"><span class="string">    instance of PtyProcess.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    If preexec_fn is supplied, it will be called with no arguments in the</span></span><br><span class="line"><span class="string">    child process before exec-ing the specified command.</span></span><br><span class="line"><span class="string">    It may, for instance, set signal handlers to SIG_DFL or SIG_IGN.</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    Dimensions of the psuedoterminal used for the subprocess can be</span></span><br><span class="line"><span class="string">    specified as a tuple (rows, cols), or the default (24, 80) will be used.</span></span><br></pre></td></tr></table></figure></p><p>可以看到<code>dimensions</code>默认为<code>(24, 80)</code>,即伪终端默认的行数为<code>24</code>行，列数为<code>80</code>列。这个默认值在很多情况下是显得较小的。为了执行一些长命令不需要翻页，我们可以将行数设为<code>1024</code>行，列数设置为<code>100</code>。及参数为<code>dimensions=(1024, 100)</code></p><p>当我们将行列设为<code>1024 * 100</code>时，此时的最大字符会达到<code>100K</code>，此时pexpect的默认最大接收长度只有<code>2000</code>字节，所以需要将maxread大小设为 <code>1024 * 100</code>字节。</p><h2 id="使用方法演示"><a href="#使用方法演示" class="headerlink" title="使用方法演示"></a>使用方法演示</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> pexpect</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">conn = pexpect.spawn(<span class="string">'ssh root@127.0.0.1'</span>, timeout=<span class="number">30</span>, dimensions=(<span class="number">1024</span>, <span class="number">100</span>), maxread=<span class="number">1024</span>*<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">index = conn.expect([<span class="string">'(?i)username:'</span>, <span class="string">'(?i)password:'</span>, <span class="string">'(?i)Last Login'</span>, pexpect.TIMEOUT], timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">0</span>:</span><br><span class="line">    conn.sendline(<span class="string">'root'</span>)</span><br><span class="line">    index = conn.expect([<span class="string">'(?i)username:'</span>, <span class="string">'(?i)password:'</span>, <span class="string">'(?i)Last Login'</span>, pexpect.TIMEOUT], timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> index == <span class="number">1</span>:</span><br><span class="line">    conn.sendline(<span class="string">'1'</span>)</span><br><span class="line">    index = conn.expect([<span class="string">'(?i)username:'</span>, <span class="string">'(?i)password:'</span>, <span class="string">'(?i)Last Login'</span>, pexpect.TIMEOUT], timeout=<span class="number">3</span>)</span><br><span class="line"><span class="keyword">if</span> index != <span class="number">2</span>:</span><br><span class="line">    print(<span class="string">'login fail'</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line">conn.sendline(<span class="string">'man ip'</span>)</span><br><span class="line">index = conn.expect([<span class="string">'(?i)username:'</span>, <span class="string">'(?i)password:'</span>, pexpect.TIMEOUT], timeout=<span class="number">3</span>)</span><br><span class="line">print(conn.before.decode())</span><br></pre></td></tr></table></figure><p>执行结果如下<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br></pre></td><td class="code"><pre><span class="line">IP(8)                                         Linux                                         IP(8)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       ip - show / manipulate routing, devices, policy routing and tunnels</span><br><span class="line"></span><br><span class="line">SYNOPSIS</span><br><span class="line">       ip [ OPTIONS ] OBJECT &#123; COMMAND | help &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       ip [ -force ] -batch filename</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       OBJECT := &#123; link | address | addrlabel | route | rule | neigh | ntable | tunnel | tuntap |</span><br><span class="line">               maddress | mroute | mrule | monitor | xfrm | netns | l2tp | tcp_metrics | token |</span><br><span class="line">               macsec &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       OPTIONS := &#123; -V[ersion] | -h[uman-readable] | -s[tatistics] | -d[etails] | -r[esolve] |</span><br><span class="line">               -iec | -f[amily] &#123; inet | inet6 | ipx | dnet | link &#125; | -4 | -6 | -I | -D | -B |</span><br><span class="line">               -0 | -l[oops] &#123; maximum-addr-flush-attempts &#125; | -o[neline] | -rc[vbuf] [size] |</span><br><span class="line">               -t[imestamp] | -ts[hort] | -n[etns] name | -a[ll] | -c[olor] &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">OPTIONS</span><br><span class="line">       -V, -Version</span><br><span class="line">              Print the version of the ip utility and exit.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -h, -human, -human-readable</span><br><span class="line">              output statistics with human readable values followed by suffix.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -b, -batch &lt;FILENAME&gt;</span><br><span class="line">              Read commands from provided file or standard input and invoke them.  First failure</span><br><span class="line">              will cause termination of ip.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -force Don't terminate ip on errors in batch mode.  If there were any errors during execu‐</span><br><span class="line">              tion of the commands, the application return code will be non zero.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -s, -stats, -statistics</span><br><span class="line">              Output more information. If the option appears twice or more, the amount of infor‐</span><br><span class="line">              mation increases.  As a rule, the information is statistics or some time values.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -d, -details</span><br><span class="line">              Output more detailed information.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -l, -loops &lt;COUNT&gt;</span><br><span class="line">              Specify maximum number of loops the 'ip address flush' logic will attempt before</span><br><span class="line">              giving up. The default is 10.  Zero (0) means loop until all addresses are removed.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -f, -family &lt;FAMILY&gt;</span><br><span class="line">              Specifies the protocol family to use. The protocol family identifier can be one of</span><br><span class="line">              inet, inet6, bridge, ipx, dnet, mpls or link.  If this option is not present, the</span><br><span class="line">              protocol family is guessed from other arguments. If the rest of the command line</span><br><span class="line">              does not give enough information to guess the family, ip falls back to the default</span><br><span class="line">              one, usually inet or any.  link is a special family identifier meaning that no net‐</span><br><span class="line">              working protocol is involved.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -4     shortcut for -family inet.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -6     shortcut for -family inet6.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -B     shortcut for -family bridge.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -D     shortcut for -family decnet.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -I     shortcut for -family ipx.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -M     shortcut for -family mpls.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -0     shortcut for -family link.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -o, -oneline</span><br><span class="line">              output each record on a single line, replacing line feeds with the '\' character.</span><br><span class="line">              This is convenient when you want to count records with wc(1) or to grep(1) the out‐</span><br><span class="line">              put.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -r, -resolve</span><br><span class="line">              use the system's name resolver to print DNS names instead of host addresses.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -n, -netns &lt;NETNS&gt;</span><br><span class="line">              switches ip to the specified network namespace NETNS.  Actually it just simplifies</span><br><span class="line">              executing of:</span><br><span class="line"></span><br><span class="line">              ip netns exec NETNS ip [ OPTIONS ] OBJECT &#123; COMMAND | help &#125;</span><br><span class="line"></span><br><span class="line">              to</span><br><span class="line"></span><br><span class="line">              ip -n[etns] NETNS [ OPTIONS ] OBJECT &#123; COMMAND | help &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -a, -all</span><br><span class="line">              executes specified command over all objects, it depends if command supports this</span><br><span class="line">              option.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -c, -color</span><br><span class="line">              Use color output.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -t, -timestamp</span><br><span class="line">              display current time when using monitor option.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -ts, -tshort</span><br><span class="line">              Like -timestamp, but use shorter format.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -rc, -rcvbuf&lt;SIZE&gt;</span><br><span class="line">              Set the netlink socket receive buffer size, defaults to 1MB.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       -iec   print human readable rates in IEC units (e.g. 1Ki = 1024).</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">IP - COMMAND SYNTAX</span><br><span class="line">   OBJECT</span><br><span class="line">       address</span><br><span class="line">              - protocol (IP or IPv6) address on a device.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       addrlabel</span><br><span class="line">              - label configuration for protocol address selection.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       l2tp   - tunnel ethernet over IP (L2TPv3).</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       link   - network device.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       maddress</span><br><span class="line">              - multicast address.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       monitor</span><br><span class="line">              - watch for netlink messages.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       mroute - multicast routing cache entry.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       mrule  - rule in multicast routing policy database.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       neighbour</span><br><span class="line">              - manage ARP or NDISC cache entries.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       netns  - manage network namespaces.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       ntable - manage the neighbor cache's operation.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       route  - routing table entry.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       rule   - rule in routing policy database.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       tcp_metrics/tcpmetrics</span><br><span class="line">              - manage TCP Metrics</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       token  - manage tokenized interface identifiers.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       tunnel - tunnel over IP.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       tuntap - manage TUN/TAP devices.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       xfrm   - manage IPSec policies.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       The names of all objects may be written in full or abbreviated form, for example address</span><br><span class="line">       can be abbreviated as addr or just a.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   COMMAND</span><br><span class="line">       Specifies the action to perform on the object.  The set of possible actions depends on the</span><br><span class="line">       object type.  As a rule, it is possible to add, delete and show (or list ) objects, but</span><br><span class="line">       some objects do not allow all of these operations or have some additional commands. The</span><br><span class="line">       help command is available for all objects. It prints out a list of available commands and</span><br><span class="line">       argument syntax conventions.</span><br><span class="line"></span><br><span class="line">       If no command is given, some default command is assumed.  Usually it is list or, if the</span><br><span class="line">       objects of this class cannot be listed, help.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXIT STATUS</span><br><span class="line">       Exit status is 0 if command was successful, and 1 if there is a syntax error.  If an error</span><br><span class="line">       was reported by the kernel exit status is 2.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXAMPLES</span><br><span class="line">       ip addr</span><br><span class="line">           Shows addresses assigned to all network interfaces.</span><br><span class="line"></span><br><span class="line">       ip neigh</span><br><span class="line">           Shows the current neighbour table in kernel.</span><br><span class="line"></span><br><span class="line">       ip link set x up</span><br><span class="line">           Bring up interface x.</span><br><span class="line"></span><br><span class="line">       ip link set x down</span><br><span class="line">           Bring down interface x.</span><br><span class="line"></span><br><span class="line">       ip route</span><br><span class="line">           Show table routes.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HISTORY</span><br><span class="line">       ip was written by Alexey N. Kuznetsov and added in Linux 2.2.</span><br><span class="line"></span><br><span class="line">SEE ALSO</span><br><span class="line">       ip-address(8), ip-addrlabel(8), ip-l2tp(8), ip-link(8), ip-maddress(8), ip-monitor(8), ip-</span><br><span class="line">       mroute(8), ip-neighbour(8), ip-netns(8), ip-ntable(8), ip-route(8), ip-rule(8), ip-</span><br><span class="line">       tcp_metrics(8), ip-token(8), ip-tunnel(8), ip-xfrm(8)</span><br><span class="line">       IP Command reference ip-cref.ps</span><br><span class="line"></span><br><span class="line">REPORTING BUGS</span><br><span class="line">       Report any bugs to the Network Developers mailing list &lt;netdev@vger.kernel.org&gt; where the</span><br><span class="line">       development and maintenance is primarily done.  You do not have to be subscribed to the</span><br><span class="line">       list to send a message there.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">AUTHOR</span><br><span class="line">       Original Manpage by Michail Litvak &lt;mci@owl.openwall.com&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">iproute2                                   20 Dec 2011                                      IP(8)</span><br><span class="line"> Manual page ip(8) line 1/253 (END) (press h for help or q to quit)</span><br></pre></td></tr></table></figure></p><p>可以看到结果将<code>man ip</code>的结果全部输出了，并且中间没有man方法的翻页提示。</p><h1 id="相关"><a href="#相关" class="headerlink" title="相关"></a>相关</h1><p><code>pexpec</code>官方文档: <a href="https://pexpect.readthedocs.io/en/stable/" target="_blank" rel="noopener">https://pexpect.readthedocs.io/en/stable/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;code&gt;python&lt;/code&gt;有一个&lt;code&gt;pexpect&lt;/code&gt;工具可以很方便的用来执行系统交互式操作。pexpect如何使用则不详细讲解了，此文主要讲解使用&lt;code&gt;pexpect&lt;/code&gt;库执行长命令时遇到的问题。&lt;/p&gt;
    
    </summary>
    
      <category term="问题总结" scheme="http://www.flyl3una.cc/categories/%E9%97%AE%E9%A2%98%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="pexpect" scheme="http://www.flyl3una.cc/tags/pexpect/"/>
    
  </entry>
  
  <entry>
    <title>Python与使用ctype调用动态连接库</title>
    <link href="http://www.flyl3una.cc/2018/12/29/python%E4%B8%8Ec%E4%BA%A4%E4%BA%92/"/>
    <id>http://www.flyl3una.cc/2018/12/29/python与c交互/</id>
    <published>2018-12-29T07:41:58.000Z</published>
    <updated>2018-12-29T07:47:32.584Z</updated>
    
    <content type="html"><![CDATA[<p>python作为胶水语言，很多时候需要与其他语言打交道。python可以使用ctype这个基础库很容易的调用C语言封装的动态连接库。</p><a id="more"></a><h2 id="导入包"><a href="#导入包" class="headerlink" title="导入包"></a>导入包</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> ctypes <span class="comment"># 或者</span></span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h2 id="加载dll"><a href="#加载dll" class="headerlink" title="加载dll"></a>加载dll</h2><p>stdcall调用约定：两种加载方式(Windows)<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Objdll</span> = ctypes.windll.LoadLibrary(<span class="string">"dllpath"</span>)    </span><br><span class="line"><span class="attr">Objdll</span> = ctypes.WinDLL(<span class="string">"dllpath"</span>)</span><br></pre></td></tr></table></figure></p><p>cdecl调用约定：也有两种加载方式(linux),Linux下需要so的绝对路径<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Objdll</span> = ctypes.cdll.LoadLibrary(<span class="string">"dllpath"</span>)    </span><br><span class="line"><span class="attr">Objdll</span> = ctypes.CDLL(<span class="string">"dllpath"</span>)</span><br></pre></td></tr></table></figure></p><table><thead><tr><th>ctypes</th><th>type C type</th><th>Python Type</th></tr></thead><tbody><tr><td>c_char</td><td>char</td><td>1-character string</td></tr><tr><td>c_wchar</td><td>wchar_t</td><td>1-character unicode string</td></tr><tr><td>c_byte</td><td>char</td><td>int/long</td></tr><tr><td>c_ubyte</td><td>unsigned char</td><td>int/long</td></tr><tr><td>c_bool</td><td>bool</td><td>bool</td></tr><tr><td>c_short</td><td>short</td><td>int/long</td></tr><tr><td>c_ushort</td><td>unsigned short</td><td>int/long</td></tr><tr><td>c_int</td><td>int</td><td>int/long</td></tr><tr><td>c_uint</td><td>unsigned int</td><td>int/long</td></tr><tr><td>c_long</td><td>long</td><td>int/long</td></tr><tr><td>c_ulong</td><td>unsigned long</td><td>int/long</td></tr><tr><td>c_longlong</td><td>__int64 or longlong</td><td>int/long</td></tr><tr><td>c_ulonglong</td><td>unsigned __int64 or unsigned long long</td><td>int/long</td></tr><tr><td>c_float</td><td>float</td><td>float</td></tr><tr><td>c_double</td><td>double</td><td>float</td></tr><tr><td>c_longdouble</td><td>long double float</td><td>float</td></tr><tr><td>c_char_p</td><td>char *</td><td>string or None</td></tr><tr><td>c_wchar_p</td><td>wchar_t *</td><td>unicode or None</td></tr><tr><td>c_void_p</td><td>void *</td><td>int/long or None</td></tr></tbody></table><h2 id="指针与引用"><a href="#指针与引用" class="headerlink" title="指针与引用"></a>指针与引用</h2><p>常用的通过调用ctypes类型的指针函数来创建指针实例：<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> ctype <span class="keyword">import</span> *  </span><br><span class="line">i = c_int(<span class="number">1</span>)  </span><br><span class="line">pi = POINTER(i)</span><br></pre></td></tr></table></figure></p><p>函数默认返回值为int型。通过下面来设置返回字符串<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encodeMessage = cipher_dll.EncodeMessageWithCustomKey</span><br><span class="line">encodeMessage.restype = c_char_p</span><br></pre></td></tr></table></figure></p><p>C语言很多函数会返回一个void*类型的指针，里面按字节存的数据，可能会包含’\0’，所以不能设置返回类型为c_char_p，否在会被截断造成内存溢出。可以使用<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">encodeMessage = cipher_dll.EncodeMessageWithCustomKey</span><br><span class="line">encodeMessage.restype = POINTER(c_ubyte) <span class="comment">#或者c_byte，c_ubyte为无符号数据</span></span><br></pre></td></tr></table></figure></p><p>某些函数需要传一个char*指针</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">len = <span class="number">256</span></span><br><span class="line">message = [<span class="number">1</span>] * len</span><br><span class="line">out_p = (c_ubyte * len)(*message)</span><br></pre></td></tr></table></figure><p><strong>Linux查看动态连接库导出函数</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm -D mylib.so</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python作为胶水语言，很多时候需要与其他语言打交道。
python可以使用ctype这个基础库很容易的调用C语言封装的动态连接库。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="ctype" scheme="http://www.flyl3una.cc/tags/ctype/"/>
    
  </entry>
  
  <entry>
    <title>Python操作数据库</title>
    <link href="http://www.flyl3una.cc/2018/11/01/Python%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>http://www.flyl3una.cc/2018/11/01/Python操作数据库/</id>
    <published>2018-11-01T09:34:54.000Z</published>
    <updated>2018-11-01T09:37:56.339Z</updated>
    
    <content type="html"><![CDATA[<p>下列为python连接mysql,psql,oracle,sqlserver,sybase数据库方法</p><a id="more"></a><h1 id="mysql"><a href="#MySql" class="headerlink" title="MySql"></a>MySql</h1><p>在python3中使用pymyssql连接mysql数据库</p><h2 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pymysql</span><br></pre></td></tr></table></figure><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymysql</span><br><span class="line">conn = pymysql.connect(user=<span class="string">'user'</span>, password=<span class="string">'123456'</span>, host=<span class="string">'127.0.0.1'</span>, port=<span class="number">3306</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">cursor.execute(<span class="string">'select * from table'</span>)<span class="comment"># 执行命令</span></span><br><span class="line">conn.commit()<span class="comment"># 提交操作</span></span><br><span class="line">result = cursor.fetchall()</span><br><span class="line">rowcount = cursor.rowcount<span class="comment">#影响行</span></span><br><span class="line">statuemessage = cursor.statuemssage <span class="comment">#数据库返回消息</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="postgresql"><a href="#Postgresql" class="headerlink" title="Postgresql"></a>Postgresql</h1><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install psycopg2</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psycopg2</span><br><span class="line">conn_args = &#123;<span class="string">'user'</span>: <span class="string">'user'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>, <span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'port'</span>: <span class="number">5432</span>, <span class="string">'dbname'</span>:<span class="string">'dbname'</span>&#125;</span><br><span class="line">conn = psycopg2.connect(**conn_args)</span><br><span class="line">cursor = conn.cursor()</span><br></pre></td></tr></table></figure><h1 id="sqlserver"><a href="#Sqlserver" class="headerlink" title="Sqlserver"></a>Sqlserver</h1><h2 id="安装环境"><a href="#安装环境-1" class="headerlink" title="安装环境"></a>安装环境</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip instal pymssql</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pymssql</span><br><span class="line">connection_args = &#123;<span class="string">'host'</span>: <span class="string">'127.0.0.1'</span>, <span class="string">'user'</span>: <span class="string">'user'</span>, <span class="string">'password'</span>: <span class="string">'password'</span>&#125;</span><br><span class="line">conn = pymssql.connect(**connection_args)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="oracle"><a href="#Oracle" class="headerlink" title="Oracle"></a>Oracle</h1><h2 id="安装依赖环境"><a href="#安装依赖环境" class="headerlink" title="安装依赖环境"></a>安装依赖环境</h2><ol><li><p>oracle的动态链接库</p><p>到oracle官网下载instantclieng basic驱动包，并安装，然后设置环境变量指向安装目录。</p><p>如果是centos则可以到<a href="https://centos.pkgs.org/下载对应的rpm包安装。" target="_blank" rel="noopener">https://centos.pkgs.org/下载对应的rpm包安装。</a></p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install oracle-instantclient18.3-basic-18.3.0.0.0-1.x86_64 -y</span><br><span class="line">echo /usr/lib/oracle/18.3/client64/lib &gt; /etc/ld.so.conf.d/oracle-instant.conf</span><br><span class="line">ldconfig</span><br></pre></td></tr></table></figure><ol start="2"><li>python安装cx_Oracle库</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install cx_Oracle</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cx_Oracle</span><br><span class="line">dns = cx_Oracle.makedns(<span class="string">'127.0.0.1'</span>, <span class="number">1521</span>, sid)</span><br><span class="line"><span class="comment"># dns = cx_Oracle.makedns('127.0.0.1', 1521, server_name)#连接oracle数据库需要sid或server_name,server_name即为数据库名</span></span><br><span class="line">connect_args = &#123;<span class="string">'user'</span>: <span class="string">'user'</span>, <span class="string">'password'</span>: <span class="string">'123456'</span>, <span class="string">'dsn'</span>: dsn&#125;</span><br><span class="line">connect_args[<span class="string">'mode'</span>] = cx_Oracle.SYSDBA <span class="comment"># 如果连接用户为sysdba或者sysoper权限，则加上对应角色权限</span></span><br><span class="line">conn = cx_Oracle.connect(**connect_args)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">...</span><br></pre></td></tr></table></figure><h1 id="sybase"><a href="#Sybase" class="headerlink" title="Sybase"></a>Sybase</h1><h2 id="安装环境"><a href="#安装环境-2" class="headerlink" title="安装环境"></a>安装环境</h2><p>sybase需要使用odbc驱动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install unixODBC -y</span><br><span class="line">yum install pyodbc -y</span><br><span class="line">pip install pyodbc</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">conn_string=<span class="string">"Driver=TDS;Server=server;Port=1498;UID=user;PWD=password;TDS_VERSION=5.0"</span></span><br><span class="line">conn = pyodbc.connect(conn_string, autocommit=<span class="keyword">True</span>)</span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">...</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;下列为python连接mysql,psql,oracle,sqlserver,sybase数据库方法&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="数据库" scheme="http://www.flyl3una.cc/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
      <category term="mysql" scheme="http://www.flyl3una.cc/tags/mysql/"/>
    
      <category term="postgresql" scheme="http://www.flyl3una.cc/tags/postgresql/"/>
    
      <category term="oracle" scheme="http://www.flyl3una.cc/tags/oracle/"/>
    
      <category term="sqlserver" scheme="http://www.flyl3una.cc/tags/sqlserver/"/>
    
      <category term="sybase" scheme="http://www.flyl3una.cc/tags/sybase/"/>
    
  </entry>
  
  <entry>
    <title>Linux匹配字符串操作</title>
    <link href="http://www.flyl3una.cc/2018/11/01/Linux%E5%8C%B9%E9%85%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.flyl3una.cc/2018/11/01/Linux匹配字符串操作/</id>
    <published>2018-11-01T08:16:29.000Z</published>
    <updated>2018-12-29T07:33:22.642Z</updated>
    
    <content type="html"><![CDATA[<p>linux常用的字符匹配检测工具有grep，如果需要使用正则匹配，sed和awk也很强大。</p><h1 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h1><p><code>grep</code>命令用户查找文件里符合条件的字符串。</p><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep [-abcEFGhHilLnqrsvVwxy][-A&lt;显示列数&gt;][-B&lt;显示列数&gt;][-C&lt;显示列数&gt;][-d&lt;进行动作&gt;][-e&lt;范本样式&gt;][-f&lt;范本文件&gt;][--help][范本样式][文件或目录...]</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><blockquote><p>样式：需要匹配的规则字符串。</p></blockquote><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-a/–text</td><td>不忽略二进制数据</td></tr><tr><td>-A [显示行数]/–after-context=&lt;显示行数&gt;</td><td>除了显示符合匹配的那一行之外，还显示后面的内容。</td></tr><tr><td>-b/–bytes-offset</td><td>在显示符合样式那一行之前，标识出改行第一个字符的标号。</td></tr><tr><td>-c/–count</td><td>计算匹配样式的列数。</td></tr><tr><td>-C &lt;显示行数&gt;/–context=&lt;显示行数&gt;</td><td>除了显示符合匹配样式的哪一行之外，并显示改行前后的内容。</td></tr><tr><td>-d &lt;动作&gt;/–directories=&lt;动作&gt;</td><td>当指定要查找的是目录而非文件时，必须使用这项参数，否则grep指令将回报信息并停止操作。</td></tr><tr><td>-e &lt;范本样式&gt;/–regexp=&lt;范本样式&gt;</td><td>指定字符串作为查找内容的样式。</td></tr><tr><td>-E/–extended-regexp</td><td>将样式为延伸的普通表示法来使用</td></tr><tr><td>-f&lt;规则文件&gt;/–file=&lt;规则文件&gt;</td><td>指定规则文件，其内容含有一个或多个规则样式，让grep查找符合规则的文件内容，格式为每一行一个规则样式。</td></tr><tr><td>-F/–fixed-regrexp</td><td>将样式视为固定字符串列表。</td></tr><tr><td>-G/–basic-regexp</td><td>将样式视为普通表示法来使用</td></tr><tr><td>-h/–no-filename</td><td>在显示符合样式哪一行前，表示改行所属文件名称</td></tr><tr><td>-H/–with-filename</td><td>在显示符合样式哪一行前，表示改行所属的文件名称</td></tr><tr><td>-i/–ignore-case</td><td>忽略字符大小写</td></tr><tr><td>-I/–file-with-matches</td><td>列出文件内容符合指定的样式文件名称</td></tr><tr><td>-L/–file-without-matchs</td><td>列出文件内容指定的样式的文件名称</td></tr><tr><td>-n/–line-number</td><td>在显示符合样式的哪一行前，标出改行的列数编号</td></tr><tr><td>-q/–quiet,–silent</td><td>不显示任何信息</td></tr><tr><td>-V/–version</td><td>显示版本信息</td></tr><tr><td>-v/–revert-match</td><td>显示不包含匹配文本的所有行</td></tr><tr><td>-w/–word-regexp</td><td>只显示全字符合的列</td></tr><tr><td>-x/–line-regexp</td><td>只显示全列符合的列</td></tr></tbody></table><p>样例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grep test *file# 查找后缀有file字样的文件中包含test字符串的文件，并打印出该字符串的行</span><br><span class="line">grep -r update /etc/acpi # 以递归方式查找符合条件的文件。并打印出该字符串所在行的内容</span><br><span class="line">ls ./ | grep abc#查找当前目录下文件名包含abc的文件或文件夹</span><br></pre></td></tr></table></figure><h1 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h1><p>awk是一种处理文本的工具。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk [选项参数] 'script' var=value file(s)</span><br><span class="line">awk [选项参数] -f scriptfile var=value file(s)</span><br></pre></td></tr></table></figure><h2 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明"></a>参数说明</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-F fs/–field-separator fs</td><td>指定输入文件分隔符，fs是一个字符串或者一个正则表达式</td></tr><tr><td>-v var=value/–asign var=value</td><td>赋值一个用户定义变量</td></tr><tr><td>-f scriptfile/–file scriptfile</td><td>从脚本文件中读取awk命令</td></tr><tr><td>-mf nnn and -mr nnn</td><td>对nnn值设置内在限制，-mf选项限制分配给nnn的最大块数目；-mr选项限制记录的最大数目，这两个功能是Bell实验室awk扩展功能，标准awk不适用</td></tr><tr><td>-W compact/–compact/-W traditional/–traditional</td><td>在兼容模式下允许awk。</td></tr><tr><td>-W copyleft/–copyleft</td><td>打印简短的版权信息</td></tr><tr><td>-W lint-old/–line-old</td><td>打印关于不能向传统unix平台一直的警告</td></tr><tr><td>-W posix</td><td>打开兼容模式</td></tr><tr><td>-W re-interval/–re-inerval</td><td>允许间隔正则表达式的使用</td></tr><tr><td>-W source program-text/–source program-text</td><td>使用program-text作为源代码，可以与-f命令混用</td></tr><tr><td>-W version/–version</td><td>打印bug报告信息版本</td></tr></tbody></table><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">awk '&#123;[parttern] action&#125;' &#123;filenames&#125;#行匹配语句awk '' 只能使用单引号</span><br><span class="line">awk -f &#123;awk脚本&#125; &#123;文件名&#125;</span><br><span class="line">awk '&#123;print $1,$4&#125;' log.txt#每行按空格或TAB分隔，输出项为1、4项</span><br><span class="line">awk -F , '&#123;print $1,$2&#125;' log.txt#使用","分隔</span><br><span class="line">awk -v a=1 '&#123;print $1,$1+a&#125;' log.txt #设置变量a</span><br><span class="line">awk -f cal.awk log.txt#使用脚本处理log.txt</span><br><span class="line">ls -l *.txt | awk '&#123;sum+=$6&#125; END &#123;print sum&#125;'# 计算文件大小</span><br><span class="line">awk 'length&gt;80' log.txt# 找出长度大于80的行</span><br><span class="line">seq 9 | sed 'H;g' | awk -v RS='' '&#123;for(i=1;i&lt;=NF;i++) printf("%dx%d=%d%s",i,NR,i*NR,i==NR?"\n":"\t")&#125;'#打印99乘法表</span><br></pre></td></tr></table></figure><h2 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h2><table><thead><tr><th>运算符</th><th>描述</th></tr></thead><tbody><tr><td>= += -= *= /= %= ^= **=</td><td>赋值</td></tr><tr><td>?:</td><td>C条件表达式</td></tr><tr><td>\</td><td>\</td><td></td><td>逻辑或</td></tr><tr><td>&amp;&amp;</td><td>逻辑与</td></tr><tr><td>~ ~!</td><td>匹配正则表达式和不匹配正则表达式</td></tr><tr><td>&lt; &lt;= &gt; &gt;= != ==</td><td>关系运算符</td></tr><tr><td>空格</td><td>连接</td></tr><tr><td>+ -</td><td>加，减</td></tr><tr><td>* / %</td><td>乘，除与求余</td></tr><tr><td>+ - !</td><td>一元加，减和逻辑非</td></tr><tr><td>^ ***</td><td>求幂</td></tr><tr><td>++ –</td><td>增加或减少，作为前缀或后缀</td></tr><tr><td>$</td><td>字段引用</td></tr><tr><td>in</td><td>数组成员</td></tr></tbody></table><p>实例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">awk '$1&gt;2' log.txt# 过滤第一列大于2的行</span><br><span class="line">awk '$1==2 &#123;print $1, $3&#125;' log.txt#输出第一列等于2的信息</span><br><span class="line">awk '$1&gt;2 &amp;&amp; $2=="Are" &#123;print $1,$2,$3&#125;' log.txt # 输出第一列大于2，第二列等于Are的行信息</span><br></pre></td></tr></table></figure><h2 id="内建变量"><a href="#内建变量" class="headerlink" title="内建变量"></a>内建变量</h2><table><thead><tr><th>变量</th><th>描述</th></tr></thead><tbody><tr><td>$n</td><td>当前记录的第n个字段，字段间由FS分隔</td></tr><tr><td>$0</td><td>完整的输入记录</td></tr><tr><td>ARGC</td><td>命令行参数的数目</td></tr><tr><td>ARGIND</td><td>命令行中当前文件的位置(从0开始算)</td></tr><tr><td>ARGV</td><td>包含命令行参数的数组</td></tr><tr><td>CONVFMT</td><td>数字转换格式(默认值为%.6g)ENVIRON环境变量关联数组</td></tr><tr><td>ERRNO</td><td>最后一个系统错误的描述</td></tr><tr><td>FIELDWIDTHS</td><td>字段宽度列表(用空格键分隔)</td></tr><tr><td>FILENAME</td><td>当前文件名</td></tr><tr><td>FNR</td><td>各文件分别计数的行号</td></tr><tr><td>FS</td><td>字段分隔符(默认是任何空格)</td></tr><tr><td>IGNORECASE</td><td>如果为真，则进行忽略大小写的匹配</td></tr><tr><td>NF</td><td>一条记录的字段的数目</td></tr><tr><td>NR</td><td>已经读出的记录数，就是行号，从1开始</td></tr><tr><td>OFMT</td><td>数字的输出格式(默认值是%.6g)</td></tr><tr><td>OFS</td><td>输出记录分隔符（输出换行符），输出时用指定的符号代替换行符</td></tr><tr><td>ORS</td><td>输出记录分隔符(默认值是一个换行符)</td></tr><tr><td>RLENGTH</td><td>由match函数所匹配的字符串的长度</td></tr><tr><td>RS</td><td>记录分隔符(默认是一个换行符)</td></tr><tr><td>RSTART</td><td>由match函数所匹配的字符串的第一个位置</td></tr><tr><td>SUBSEP</td><td>数组下标分隔符(默认值是/034)</td></tr></tbody></table><p>使用正则表达式，匹配字符串</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">awk '$2 ~ /th/ &#123;print $2,$4&#125;' log.txt# ~表示模式开始，//中是正则表达式。该行输出第二列包含th的行的第二，4列</span><br><span class="line">awk '/re/' log.txt# 匹配包含re的行</span><br><span class="line">awk 'GEGIN&#123;INORECASE=1&#125; /this/' log.txt# 忽略大小写</span><br><span class="line">awk '$2 !~ /th/ &#123;print $2,$4&#125;' log.txt# 模式取反</span><br></pre></td></tr></table></figure><h2 id="awk脚本"><a href="#awk脚本" class="headerlink" title="awk脚本"></a>awk脚本</h2><ul><li>BEGIN{处理前执行的语句}</li><li>END{处理完后执行的语句}</li><li>{处理每一行时要执行的语句}</li></ul><h1 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h1><p>sed命令是利用script来处理文本文件。</p><h2 id="语法"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sed [-hnv] [-e&lt;script&gt;] [-f&lt;script&gt;] [文本文件]</span><br></pre></td></tr></table></figure><h3 id="参数说明"><a href="#参数说明-1" class="headerlink" title="参数说明"></a>参数说明</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>-e<script>/–expression=<script></td><td>以选项中指定的script来处理输入的文本文件。</td></tr><tr><td>-f&lt;script文件&gt;/–file=&lt;script文件&gt;</td><td>以选项中指定的script文件来处理输入的文本文件</td></tr><tr><td>-h/–help</td><td>显示帮助</td></tr><tr><td>-n/–quiet/–silent</td><td>仅显示script处理后的结果</td></tr><tr><td>-V/–version</td><td>显示版本信息</td></tr><tr><td>-i</td><td>直接修改原文件</td></tr></tbody></table><h3 id="动作说明"><a href="#动作说明" class="headerlink" title="动作说明"></a>动作说明</h3><table><thead><tr><th>动作</th><th>描述</th></tr></thead><tbody><tr><td>a</td><td>新增，a后面可以接字符串，这些字符串会在新的一行出现(目前的下一行)</td></tr><tr><td>c</td><td>取代，c后面可以接字符串，这些字符串可以取代n1,n2之间的行</td></tr><tr><td>d</td><td>删除，d后面不接字符串</td></tr><tr><td>i</td><td>插入，i后面可以借字符串，这些字符串会出现在新的一行(目前的上一行)</td></tr><tr><td>p</td><td>打印，将某个选择的数据打印出，p会与sed -n一起允许</td></tr><tr><td>s</td><td>取代，可以直接取代工作，通常和正则表达式搭配</td></tr></tbody></table><p>动作需要使用两个单引号括住</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sed -e 4a\newLine testfile# 在第4行后添加一行newLine</span><br><span class="line">nl log.txt | sed '2,5d'#删除第2到5行</span><br><span class="line">nl log.txt | sed '2,5c No 2-5 number'#将2-5行内容取代为No 2-5 number</span><br><span class="line">cat log.txt | sed '/root/p'# 查找文件中的root并显示</span><br><span class="line">cat log.txt | sed '/root/d' # 查找文件中的root并删除</span><br><span class="line">sed 's/要被取代的字符串/新字符串/g' # 替换字符串，支持正则</span><br><span class="line">sed -i 's/\.$/\!/g'log.txt #将log.txt末尾的.全部换成!</span><br></pre></td></tr></table></figure></script></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;linux常用的字符匹配检测工具有grep，如果需要使用正则匹配，sed和awk也很强大。&lt;/p&gt;
&lt;h1 id=&quot;grep&quot;&gt;&lt;a href=&quot;#grep&quot; class=&quot;headerlink&quot; title=&quot;grep&quot;&gt;&lt;/a&gt;grep&lt;/h1&gt;&lt;p&gt;&lt;code&gt;gre
      
    
    </summary>
    
      <category term="折腾笔记" scheme="http://www.flyl3una.cc/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://www.flyl3una.cc/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Python IO操作</title>
    <link href="http://www.flyl3una.cc/2018/10/31/Python-IO%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.flyl3una.cc/2018/10/31/Python-IO操作/</id>
    <published>2018-10-31T03:34:47.000Z</published>
    <updated>2018-10-31T03:40:21.527Z</updated>
    
    <content type="html"><![CDATA[<p>IO在计算机中指Input/Output，即输入输出。程序运行时数据在内存中，设计到数据交换，就需要使用IO，通常是磁盘，网络，串口等需要数据交换。</p><p>操作IO的能力都是由操作系统提供的，不通的变成语言回把操作系统提供的底层库封装成对应语言的库供对应语言的使用。</p><a id="more"></a><h1 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h1><p>读写文件是最常见的IO操作。</p><h2 id="读文件"><a href="#读文件" class="headerlink" title="读文件"></a>读文件</h2><p>读写文件需要使用<code>open()</code>方法来打开文件句柄。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open(file, mode=<span class="string">'r'</span>, buffering=<span class="number">-1</span>, encoding=<span class="keyword">None</span>, errors=<span class="keyword">None</span>, newline=<span class="keyword">None</span>, closefd=<span class="keyword">True</span>, opener=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><ul><li>file: 文件觉得路径</li><li>mode: 文件打开方式。r,r+,w,w+,a,a+；使用二进制操作文件则加上b,例如rb</li><li>buffering: 指定缓冲区大小</li><li>encoding: 文件编码</li><li>newline: 设置换行符</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fp = open(<span class="string">'/home/user/1.txt'</span>, <span class="string">'r'</span>)</span><br></pre></td></tr></table></figure><p>标志符’r’表示使用字符流形式读文件，这样就打开了一个文件，并得到了该文件的可读操作句柄fp。</p><p>如果文件不存在，open()函数回抛出IOError异常。</p><p><code>read()</code>可以一次读取文件的全部内容，把所有内容读到内存中，用一个<code>str</code>对象表示。</p><p><code>readline()</code>可以一次读取一行内容。</p><p>每个打开的文件在不使用时一定要使用<code>close()</code>方法关闭文件。否则回占用操作系统资源。由于操作系统打开文件数量有限，大量的文件句柄被占用会导致操作系统无法正常工作。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fp.close()</span><br></pre></td></tr></table></figure><p>python中引入了with语句来自动帮我们调用<code>close()</code>方法关闭文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/home/user/1.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    print(fp.read())</span><br></pre></td></tr></table></figure><p>如果文件不大，使用read()一次读取更方便；不能确定文件大小则可以返回调用<code>read(size)</code>来循环读取文件。</p><h2 id="写文件"><a href="#写文件" class="headerlink" title="写文件"></a>写文件</h2><p>向创建<code>/home/user/2.txt</code>文件并向文件写入<code>hello world!</code>。如果该文件原本有内容，则会被覆盖。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'/home/user/2.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(<span class="string">'hello world!'</span>)</span><br></pre></td></tr></table></figure><h1 id="stringio和bytesio"><a href="#StringIO和BytesIO" class="headerlink" title="StringIO和BytesIO"></a>StringIO和BytesIO</h1><h1 id="stringio"><a href="#StringIO" class="headerlink" title="StringIO"></a>StringIO</h1><p>很多时候，数据读写不一定是文件，也可能会在内存中读写。</p><p><code>StringIO</code>就是在内存中读写str字符串。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">with</span> StringIO() <span class="keyword">as</span> fp:</span><br><span class="line">    fp.wirte(<span class="string">'hello world'</span>)</span><br><span class="line">    print(fp.getvalue())</span><br></pre></td></tr></table></figure><p>显示结果</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">hello world</span></span><br></pre></td></tr></table></figure><p>StringIO创建的句柄使用<code>write()</code>进行写操作，使用<code>getvalue()</code>方法进行读。</p><h2 id="bytesio"><a href="#BytesIO" class="headerlink" title="BytesIO"></a>BytesIO</h2><p>StringIO只能操作字符串，如果要操作二进制数据，则需要使用BytesIO。</p><p>BytesIO实现了内存中读写bytes。使用方法跟StringIO相同，唯一区别就是操作str变成了bytes。</p><blockquote><p>在python中，StringIO和BytesIO不建议使用清空操作，如果想要重复使用该操作，请重新创建一个新的对象。</p></blockquote><h1 id="几种方式读取文件速度"><a href="#几种方式读取文件速度" class="headerlink" title="几种方式读取文件速度"></a>几种方式读取文件速度</h1><ol><li>使用<code>readlines()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file, <span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    <span class="keyword">for</span> line <span class="keyword">in</span> fp.readlines():</span><br><span class="line">        line.split(<span class="string">'|'</span>)</span><br></pre></td></tr></table></figure><p>该方法一次性将文件所有内容读取到内存中，速度快，耗内存。不建议打开大文件。</p><ol start="2"><li>使用<code>readline()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file, <span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    line = fp.readline()</span><br><span class="line">    <span class="keyword">while</span> line:</span><br><span class="line">        line.split(<span class="string">'|'</span>)</span><br><span class="line">        line = fp.readline()</span><br></pre></td></tr></table></figure><p>该方法每次读取一行，占用内存极小，忽略不计。速度慢，效率低。</p><ol start="3"><li>使用<code>read()</code></li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file, <span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    text = fp.read()</span><br><span class="line">    text.split(<span class="string">'|'</span>)</span><br></pre></td></tr></table></figure><p>一次读取所有内存到内存中，速度快，占用内存大，不建议打开大文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file, <span class="string">'r'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    text = fp.read(<span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">while</span> text:</span><br><span class="line">    text.split(<span class="string">'|'</span>)</span><br><span class="line">        text = fp.read(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure><p>该方法每次读取一定大小的数据，不占用内存，速度一般。</p><ol start="4"><li>使用迭代</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> open(file) <span class="keyword">as</span> fp:</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> fp:</span><br><span class="line">line.split(<span class="string">'|'</span>)</span><br></pre></td></tr></table></figure><p>该方法产生一个文件迭代器，自动缓冲IO和内存管理。不必担心打开大文件导致内存不够。速度快。</p><blockquote><p>python里面打开文件建议使用迭代方法</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;IO在计算机中指Input/Output，即输入输出。程序运行时数据在内存中，设计到数据交换，就需要使用IO，通常是磁盘，网络，串口等需要数据交换。&lt;/p&gt;
&lt;p&gt;操作IO的能力都是由操作系统提供的，不通的变成语言回把操作系统提供的底层库封装成对应语言的库供对应语言的使用。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="IO" scheme="http://www.flyl3una.cc/tags/IO/"/>
    
  </entry>
  
  <entry>
    <title>日期时间格式</title>
    <link href="http://www.flyl3una.cc/2018/10/31/%E6%97%A5%E6%9C%9F%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F/"/>
    <id>http://www.flyl3una.cc/2018/10/31/日期时间格式/</id>
    <published>2018-10-31T02:35:07.000Z</published>
    <updated>2018-10-31T03:36:48.570Z</updated>
    
    <content type="html"><![CDATA[<p>在开发中，我们经常会遇到日期时间转换，所有的语言都遵循一个标准格式来进行转换。</p><a id="more"></a><h1 id="日期格式"><a href="#日期格式" class="headerlink" title="日期格式"></a>日期格式</h1><p>在计算机里，标准的日期格式为：</p><table><thead><tr><th>格式</th><th>示例</th></tr></thead><tbody><tr><td>dd/MM/yyyy</td><td>06/03/2007</td></tr><tr><td>dd-MMM-yyyy</td><td>06-Mar-2007</td></tr><tr><td>MM/dd/yyyy</td><td>03/06/2007</td></tr><tr><td>MMM dd, yyyy</td><td>Mar 06, 2007</td></tr><tr><td>MMMMM dd, yyyy</td><td>March 06, 2007</td></tr><tr><td>yyyy.MM.dd</td><td>2007.06.03</td></tr><tr><td>yyyy/MM/dd</td><td>2007/06/03</td></tr><tr><td>yyyy-MM-dd</td><td>2007-06-03</td></tr></tbody></table><p>通常我们使用日期时间格式来描述一个具体的时间。</p><h1 id="日期时间格式"><a href="#日期时间格式" class="headerlink" title="日期时间格式"></a>日期时间格式</h1><p>可以转换的标准日期时间格式如下：</p><table><thead><tr><th>格式</th><th>示例</th></tr></thead><tbody><tr><td>dd-MM-yyyy HH’h’mm</td><td>06-03-2007 13h44</td></tr><tr><td>dd-MM-yyyy HH’h’MM’min’</td><td>06-03-2007 13h44min</td></tr><tr><td>dd-MMM-yyyy HH:mm</td><td>06-Mar-2007 13:44</td></tr><tr><td>dd/MM/yyyy HH’h’mm</td><td>06/03/2007 13h44</td></tr><tr><td>dd/MM/yyyy HH:mm</td><td>06/03/2007 13:44</td></tr><tr><td>dd/MM/yyyy hh:mm a zzz</td><td>06/03/2007 01:44 PM PST</td></tr><tr><td>dd/MM/yyyy HH:mm zzz</td><td>06/03/2007 13:44 PST</td></tr><tr><td>dd/MM/yyyy HH:mm:ss</td><td>06/03/2007 13:44:25</td></tr><tr><td>dd/MM/yyyy hh:mm:ss a zzz</td><td>06/03/2007 01:44:25 PM PST</td></tr><tr><td>dd.MM.yyyy HH:mm:ss</td><td>06.03.2007 13:44:25</td></tr><tr><td>MM/dd/yyyy HH:mm</td><td>03/06/2007 13:44</td></tr><tr><td>MM/dd/yyyy hh:mm a zzz</td><td>03/06/2007 01:44 PM PST</td></tr><tr><td>MM/dd/yyyy HH:mm zzz</td><td>03/06/2007 13:44 PST</td></tr><tr><td>MM/dd/yyyy HH:mm:ss</td><td>03/06/2007 13:44:25</td></tr><tr><td>MM/dd/yyyy hh:mm:ss a zzz</td><td>03/06/2007 01:44:25 PM PST</td></tr><tr><td>MMMMM dd, yyyy hh:mm a zzz</td><td>March 06, 2007 01:44 PM PST</td></tr><tr><td>yyyy-MM-dd HH.mm</td><td>2007-03-06 13.44</td></tr><tr><td>yyyy-MM-dd hh:mm a zzz</td><td>2007-03-06 01:44 PM PST</td></tr><tr><td>yyyy.MM.dd hh:mm a zzz</td><td>2007.03.06 01:44 PM PST</td></tr><tr><td>yyyy/MM/dd hh:mm a zzz</td><td>2007/03/06 01:44 PM PST</td></tr><tr><td>yyyy/MM/dd HH:mm zzz</td><td>2007/03/06 13:44 PST</td></tr></tbody></table><p>在上面的字符中，由两种字符类型来觉得输出的日期时间格式</p><ul><li>复制字符：从创建格式化日期时间的格式字符串中复制。例如:/-:</li><li>解释字符：根据其对应的含义来解释出具体的时间格式。例如:y,M,d,H,m,z,Z…。所有从[A-Za-z]的字符都是解释字符，其他字符是复制字符。并非所有的解释字符都有对应的解析格式。</li></ul><h1 id="日期和时间的解释字符"><a href="#日期和时间的解释字符" class="headerlink" title="日期和时间的解释字符"></a>日期和时间的解释字符</h1><p>下面为日期的解释</p><table><thead><tr><th>字母序列</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>d</td><td>一个月中一位或两位数的日期</td><td>1 - 31</td></tr><tr><td>dd</td><td>一个月中两位数的日期</td><td>01 - 31</td></tr><tr><td>DDD</td><td>一年中三位数的日期</td><td>001 - 366</td></tr><tr><td>EEE</td><td>一周中缩写的日期</td><td>Mon - Sun</td></tr><tr><td>EEEE</td><td>一周中日期的全称</td><td>Monday - Sunday</td></tr><tr><td>M</td><td>一位或两位数的月份</td><td>1 - 12</td></tr><tr><td>MM</td><td>两位数的月份</td><td>01 - 12</td></tr><tr><td>MMM</td><td>三个字母的月份缩写</td><td>Jan - Dec</td></tr><tr><td>MMMMM</td><td>月份的全称</td><td>January - December</td></tr><tr><td>y</td><td>一位或两位数的年份</td><td>0 - 99</td></tr><tr><td>yy</td><td>两位数的年份</td><td>00 - 99</td></tr><tr><td>yyyy</td><td>四位数的年份</td><td>1999、2000、2010</td></tr></tbody></table><p>下面为时间的解释</p><table><thead><tr><th>字母序列</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>a</td><td>表示 AM 或 PM</td><td>AM 或 PM</td></tr><tr><td>h</td><td>上午/下午 (1-12) 中一位或两位数的小时数</td><td>1 - 12</td></tr><tr><td>hh</td><td>上午/下午 (01-12) 中两位数的小时数</td><td>01 - 12</td></tr><tr><td>H</td><td>一天 (0-23) 中一位或两位数的小时数</td><td>0 - 23</td></tr><tr><td>HH</td><td>一天 (00-23) 中两位数的小时数</td><td>00 - 23</td></tr><tr><td>m</td><td>一小时中一位或两位数的分钟数</td><td>0 - 59</td></tr><tr><td>mm</td><td>一小时中两位数的分钟数</td><td>00 - 59</td></tr><tr><td>s</td><td>一分钟中一位或两位数的秒数</td><td>0 - 59</td></tr><tr><td>S</td><td>一位、两位或三位数的毫秒数</td><td>0 - 999</td></tr><tr><td>ss</td><td>一分钟中两位数的秒数</td><td>00 - 59</td></tr><tr><td>SSS</td><td>三位数的毫秒数</td><td>000 - 999</td></tr><tr><td>z 或 zzz</td><td>三个字母的时区缩写</td><td>EST、CST 等。</td></tr><tr><td>Z</td><td>相对于 GMT 的时区</td><td>-0500、-0600 等。</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在开发中，我们经常会遇到日期时间转换，所有的语言都遵循一个标准格式来进行转换。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="时间" scheme="http://www.flyl3una.cc/tags/%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>Python时间操作</title>
    <link href="http://www.flyl3una.cc/2018/08/13/python%E6%97%B6%E9%97%B4%E6%93%8D%E4%BD%9C/"/>
    <id>http://www.flyl3una.cc/2018/08/13/python时间操作/</id>
    <published>2018-08-13T12:20:04.000Z</published>
    <updated>2018-09-12T07:06:43.557Z</updated>
    
    <content type="html"><![CDATA[<p>time模块使用unix时间，时间范围为1970~2038年。建议使用datetime来操作时间。</p><a id="more"></a><h1 id="datetime模块"><a href="#datetime模块" class="headerlink" title="datetime模块"></a>datetime模块</h1><h2 id="获取时间"><a href="#获取时间" class="headerlink" title="获取时间"></a>获取时间</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">t = datetime.datetime.today()<span class="comment"># datetime.datetime(2018, 8, 13, 19, 39, 30, 780216)</span></span><br><span class="line"><span class="comment"># 也可以用来创建一个包含日期的时间</span></span><br><span class="line">t = datetime.datetime(<span class="number">2018</span>, <span class="number">8</span>, <span class="number">13</span>, <span class="number">19</span>, <span class="number">39</span>, <span class="number">30</span>, <span class="number">780216</span>)</span><br></pre></td></tr></table></figure><h2 id="时间戳转换timestamp"><a href="#时间戳转换timestamp" class="headerlink" title="时间戳转换timestamp"></a>时间戳转换timestamp</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stamp = t.timestamp()<span class="comment">#将时间转换为timestamp数字</span></span><br><span class="line">t = datetime.datetime.fromtimestamp(stamp)<span class="comment">#将timestamp数字转换为datetime</span></span><br></pre></td></tr></table></figure><h2 id="将字符串转换为datetime格式"><a href="#将字符串转换为datetime格式" class="headerlink" title="将字符串转换为datetime格式"></a>将字符串转换为datetime格式</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cday = datetime.strptime(<span class="string">'2018-8-1 18:19:59'</span>, <span class="string">'%Y-%m-%d %H:%M:%S'</span>)<span class="comment"># 将字符串转换为指定格式</span></span><br><span class="line">now.strftime(<span class="string">'%a, %b %d %H:%M'</span>)<span class="comment"># 将datetime转换为指定格式</span></span><br></pre></td></tr></table></figure><p>格式化类型有：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">%Y  Year <span class="keyword">with</span> century <span class="keyword">as</span> a decimal number.</span><br><span class="line">%m  Month <span class="keyword">as</span> a decimal number [<span class="number">01</span>,<span class="number">12</span>].</span><br><span class="line">%d  Day of the month <span class="keyword">as</span> a decimal number [<span class="number">01</span>,<span class="number">31</span>].</span><br><span class="line">%H  Hour (<span class="number">24</span>-hour clock) <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">23</span>].</span><br><span class="line">%M  Minute <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">59</span>].</span><br><span class="line">%S  Second <span class="keyword">as</span> a decimal number [<span class="number">00</span>,<span class="number">61</span>].</span><br><span class="line">%z  Time zone offset <span class="keyword">from</span> UTC.</span><br><span class="line">%a  Locale<span class="string">'s abbreviated weekday name.</span></span><br><span class="line"><span class="string">%A  Locale'</span>s full weekday name.</span><br><span class="line">%b  Locale<span class="string">'s abbreviated month name.</span></span><br><span class="line"><span class="string">%B  Locale'</span>s full month name.</span><br><span class="line">%c  Locale<span class="string">'s appropriate date and time representation.</span></span><br><span class="line"><span class="string">%I  Hour (12-hour clock) as a decimal number [01,12].</span></span><br><span class="line"><span class="string">%p  Locale'</span>s equivalent of either AM <span class="keyword">or</span> PM.</span><br></pre></td></tr></table></figure><h2 id="时间计算"><a href="#时间计算" class="headerlink" title="时间计算"></a>时间计算</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">t = datetime.datetime.today()<span class="comment"># 或者datetime.datetime.now()</span></span><br><span class="line">delta = datatime.datedelta(days=<span class="number">5</span>)<span class="comment"># 参数可以是days, hours, milliseconds, microseconds</span></span><br><span class="line">print(t+delta)</span><br><span class="line">print(t-delta)</span><br></pre></td></tr></table></figure><h2 id="时区转换"><a href="#时区转换" class="headerlink" title="时区转换"></a>时区转换</h2><p>转换时区得先通过utcnow()拿到当前得UTC时间</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">utc_dt = datetime.utcnow().replace(tzinfo=timezone.utc)<span class="comment"># 拿到UTC时间，并设置时区为UTC+0:00</span></span><br><span class="line">bj_dt= utc_dt.astimezon(timezone(timedelta(hours=<span class="number">8</span>)))<span class="comment"># 设置时间为北京时间</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;time模块使用unix时间，时间范围为1970~2038年。建议使用datetime来操作时间。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Python" scheme="http://www.flyl3una.cc/tags/Python/"/>
    
      <category term="datetime" scheme="http://www.flyl3una.cc/tags/datetime/"/>
    
      <category term="时间" scheme="http://www.flyl3una.cc/tags/%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>Centos7 时间管理</title>
    <link href="http://www.flyl3una.cc/2018/08/09/Centos7-%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    <id>http://www.flyl3una.cc/2018/08/09/Centos7-时间管理/</id>
    <published>2018-08-09T09:29:11.000Z</published>
    <updated>2018-09-12T07:06:43.538Z</updated>
    
    <content type="html"><![CDATA[<p>centos7使用timedatectl来工具来管理时间，使用chrony来进行时间同步。</p><a id="more"></a><h1 id="timedatectl"><a href="#timedatectl" class="headerlink" title="timedatectl"></a>timedatectl</h1><h2 id="查看时间"><a href="#查看时间" class="headerlink" title="查看时间"></a>查看时间</h2><p>在命令行里使用<code>timedatectl</code>可以看到</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">      Local time: 四 2018-08-09 17:19:40 CST</span><br><span class="line">  Universal time: 四 2018-08-09 09:19:40 UTC</span><br><span class="line">        RTC time: 四 2018-08-09 09:19:39</span><br><span class="line">       Time zone: Asia/Shanghai (CST, +0800)</span><br><span class="line">     NTP enabled: no</span><br><span class="line">NTP synchronized: no</span><br><span class="line"> RTC in local TZ: no</span><br><span class="line">      DST active: n/a</span><br></pre></td></tr></table></figure><h3 id="local-time"><a href="#Local-Time" class="headerlink" title="Local Time"></a>Local Time</h3><p>其中本地时间Local time为RTC time加上时区得到的时间。如果使用<code>date -s</code>命令更改时间。会发现只更改了Local time而没改RTC time，重启时间将会被恢复。</p><h3 id="ntp-enabled"><a href="#NTP-enabled" class="headerlink" title="NTP enabled"></a>NTP enabled</h3><p>是否打开时间同步服务，可选项为yes/no，如果为yes，则不允许更改时间。</p><h2 id="更改时间"><a href="#更改时间" class="headerlink" title="更改时间"></a>更改时间</h2><ol><li>更新时间</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-time "2018-08-09 09:00:00"#可以分开单独更新时间或者日期</span><br></pre></td></tr></table></figure><p><strong>注意</strong>： ntp服务开启时无法更改时间</p><ol start="2"><li>更新时区</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-timezone Asia/Shanghai# 只能从list-timezones时区中选择</span><br><span class="line">timedatectl list-timezones# 查看可以设置的时区</span><br></pre></td></tr></table></figure><ol start="3"><li>同步时间到硬件时间</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-local-rtc 1# 或者下面的方法</span><br><span class="line">hwclock --systohc --localtime</span><br></pre></td></tr></table></figure><ol start="4"><li>设置ntp开关</li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">timedatectl set-ntp yes/no</span><br></pre></td></tr></table></figure><h1 id="chrony-时间同步服务"><a href="#chrony-时间同步服务" class="headerlink" title="chrony 时间同步服务"></a>chrony 时间同步服务</h1><p>centos7使用chrony而不在使用ntpupdate</p><p>时间同步服务只能使用一个，如果使用了ntpupdate则不能使用chrony。</p><h2 id="开启关闭chronyd进程"><a href="#开启-关闭chronyd进程" class="headerlink" title="开启/关闭chronyd进程"></a>开启/关闭chronyd进程</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">systemctl start/stop chronyd</span><br></pre></td></tr></table></figure><p>开启chronyd后可以查看时间同步服务器列表</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chronyc sources -v</span><br></pre></td></tr></table></figure><h2 id="配置时间服务器"><a href="#配置时间服务器" class="headerlink" title="配置时间服务器"></a>配置时间服务器</h2><p>chronyd配置位置为/etc/chrony.conf</p><ul><li>server</li></ul><p>添加服务器列表，可以添加多个</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">server 0.centos.pool.ntp.org</span><br><span class="line">server ntp.api.bz</span><br></pre></td></tr></table></figure><ul><li>stratumweight</li></ul><p>​    stratumweight指令设置当chronyd从可用源中选择同步源时，每个层应该添加多少距离到同步距离。默认情况下，CentOS中设置为0，让chronyd在选择源时忽略源的层级。</p><ul><li>driftfile</li></ul><p>​    chronyd程序的主要行为之一，就是根据实际时间计算出计算机增减时间的比率，将它记录到一个文件中是最合理的，它会在重启后为系统时钟作出补偿，甚至可能的话，会从时钟服务器获得较好的估值。</p><ul><li>rtcsync</li></ul><p>​    rtcsync指令将启用一个内核模式，在该模式中，系统时间每11分钟会拷贝到实时时钟（RTC）。</p><ul><li>allow/deny</li></ul><p>这里你可以指定一台主机、子网，或者网络以允许或拒绝NTP连接到扮演时钟服务器的机器。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. allow 192.168.4.5</span><br><span class="line">2. deny 192.168/16</span><br></pre></td></tr></table></figure><ul><li>cmdallow/cmddeny</li></ul><p>​    跟上面相类似，只是你可以指定哪个IP地址或哪台主机可以通过chronyd使用控制命令</p><ul><li>bindcmdaddress</li></ul><p>​    该指令允许你限制chronyd监听哪个网络接口的命令包（由chronyc执行）。该指令通过cmddeny机制提供了一个除上述限制以外可用的额外的访问控制等级。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. bindcmdaddress 127.0.0.1</span><br><span class="line">2. bindcmdaddress ::1</span><br></pre></td></tr></table></figure><h3 id="makestep"><a href="#makestep" class="headerlink" title="makestep"></a>makestep</h3><p>​    通常，chronyd将根据需求通过减慢或加速时钟，使得系统逐步纠正所有时间偏差。在某些特定情况下，系统时钟可能会漂移过快，导致该调整过程消耗很长的时间来纠正系统时钟。该指令强制chronyd在调整期大于某个阀值时步进调整系统时钟，但只有在因为chronyd启动时间超过指定限制（可使用负值来禁用限制），没有更多时钟更新时才生效。</p><h2 id="使用chronyc进行交互式配置"><a href="#使用chronyc进行交互式配置" class="headerlink" title="使用chronyc进行交互式配置"></a>使用chronyc进行交互式配置</h2><p>你也可以通过运行chronyc命令来修改设置，命令如下：</p><ul><li>accheck：检查NTP访问是否对特定主机可用</li><li>activity： 该命令会显示有多少NTP源在线/离线</li></ul><ul><li>add server：手动添加一台新的NTP服务器。</li><li>clients： 在客户端报告已访问到服务器</li><li>delete：手动移除NTP服务器或对等服务器</li><li>settime：手动设置守护进程时间</li><li>tracking：显示系统时间信息</li></ul><p>你可以通过使用帮助命令<code>help</code>查看完整的命令列表</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;centos7使用timedatectl来工具来管理时间，使用chrony来进行时间同步。&lt;/p&gt;
    
    </summary>
    
      <category term="折腾笔记" scheme="http://www.flyl3una.cc/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://www.flyl3una.cc/tags/Linux/"/>
    
      <category term="时间管理" scheme="http://www.flyl3una.cc/tags/%E6%97%B6%E9%97%B4%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>python3 struct解析二进制</title>
    <link href="http://www.flyl3una.cc/2018/08/09/python3-struct%E8%A7%A3%E6%9E%90%E4%BA%8C%E8%BF%9B%E5%88%B6/"/>
    <id>http://www.flyl3una.cc/2018/08/09/python3-struct解析二进制/</id>
    <published>2018-08-09T09:27:40.000Z</published>
    <updated>2018-09-12T07:06:43.553Z</updated>
    
    <content type="html"><![CDATA[<p>struct模块用来处理二进制数据，例如文件二进制、socket网络数据流，C语言的结构体。</p><a id="more"></a><h1 id="struct模块"><a href="#struct模块" class="headerlink" title="struct模块"></a>struct模块</h1><p>struct常用的函数有<code>pack()</code>, <code>unpack()</code>, <code>calcsize()</code></p><ul><li>pack(fmt, v1, v2, …): 按照指定格式(fmt), 把数据封装成字节流(bytes)</li><li>unpack(fmt, bytes): 按照指定格式(fmt), 解析字节流bytes, 返回解析后的结果tuple。</li><li>calcsize(fmt): 计算给定的格式(fmt)占用多少字节的内存。</li></ul><p>struct支持的格式</p><table><thead><tr><th>Format</th><th>C Type</th><th>Python</th><th>字节数</th></tr></thead><tbody><tr><td>x</td><td>pad byte</td><td>no value</td><td>1</td></tr><tr><td>c</td><td>char</td><td>string of length 1</td><td>1</td></tr><tr><td>b</td><td>signed char</td><td>integer</td><td>1</td></tr><tr><td>B</td><td>unsigned char</td><td>integer</td><td>1</td></tr><tr><td>?</td><td>_Bool</td><td>bool</td><td>1</td></tr><tr><td>h</td><td>short</td><td>integer</td><td>2</td></tr><tr><td>H</td><td>unsigned short</td><td>integer</td><td>2</td></tr><tr><td>i</td><td>int</td><td>integer</td><td>4</td></tr><tr><td>I</td><td>unsigned int</td><td>integer or long</td><td>4</td></tr><tr><td>l</td><td>long</td><td>integer</td><td>4</td></tr><tr><td>L</td><td>unsigned long</td><td>long</td><td>4</td></tr><tr><td>q</td><td>long long</td><td>long</td><td>8</td></tr><tr><td>Q</td><td>unsigned long long</td><td>long</td><td>8</td></tr><tr><td>f</td><td>float</td><td>float</td><td>4</td></tr><tr><td>d</td><td>double</td><td>float</td><td>8</td></tr><tr><td>s</td><td>char[]</td><td>string</td><td>1</td></tr><tr><td>p</td><td>char[]</td><td>string</td><td>1</td></tr><tr><td>P</td><td>void *</td><td>long</td><td>4</td></tr></tbody></table><blockquote><p>q和Q只在机器支持64位时有作用</p><p>每个格式前可以有一共数字，表示个数</p><p>s格式表示一定长度的字符串，4s表示长度位4的字符串，但是p表示的时pascal字符串</p><p>P用来转换一共指针，其长度和机器字长相关</p><p>最后一共以用来表示指针类型的，占4个字节</p></blockquote><p>为了同C种的结构体交换数据，通常以4字节对齐。struct根据本地机器字节序转换，可以用格式种的第一个字符来改变对齐方式。</p><table><thead><tr><th>Character</th><th>Byte order</th><th>Size and alignment</th></tr></thead><tbody><tr><td>@</td><td>native</td><td>native            凑够4个字节</td></tr><tr><td>=</td><td>native</td><td>standard        按原字节数</td></tr><tr><td>&lt;</td><td>little-endian</td><td>standard        按原字节数</td></tr><tr><td>&gt;</td><td>big-endian</td><td>standard       按原字节数</td></tr><tr><td>!</td><td>network (= big-endian)</td><td>standard       按原字节数</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;struct模块用来处理二进制数据，例如文件二进制、socket网络数据流，C语言的结构体。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="进制转换" scheme="http://www.flyl3una.cc/tags/%E8%BF%9B%E5%88%B6%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>Linux crontab定时任务</title>
    <link href="http://www.flyl3una.cc/2018/08/02/Linux-crontab%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    <id>http://www.flyl3una.cc/2018/08/02/Linux-crontab定时任务/</id>
    <published>2018-08-02T10:12:27.000Z</published>
    <updated>2018-09-12T07:06:43.538Z</updated>
    
    <content type="html"><![CDATA[<p>在产品运行环境上，需要大量的定时任务对系统环境进行监控及维护处理。此时使用crontab工具能方便的完成该部分操作。</p><a id="more"></a><h1 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h1><p>crontab命令专门用于处理定时任务，crond是一个专门用于控制定时任务的守护进程。定时任务可以在固定的间隔时间执行指定的系统命令或者shell脚本及运行程序。时间间隔单位可以为分钟、小时、日、月、周及任意组合。</p><blockquote><p>crontab定时任务最小周期为分钟。</p></blockquote><p>crontab定时任务很适合周期性的日志分析，数据备份，数据清理工作。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><h2 id="格式"><a href="#格式" class="headerlink" title="格式"></a>格式</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crontab [-u user] file crontab [-u user] [ -e |-l|-r]</span><br></pre></td></tr></table></figure><h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h2><ul><li>-u user: 用来设定某个用户的crontab服务；</li><li>file: file定时命令文件的名字，表示file作为crontab的任务列表并载入crontab。如果在命令行中没有指定该文件，crontab命令将接收标准输入上的命令，并将他们载入crontab。</li><li>-e: 编辑某个用户的crontab文件内容。如果补指定用户，则表示编辑当前用户的crontab文件。</li><li>-l: 显示某个用户的crontab文件内容，如果补指定用户，则表示显示当前用户的crontab文件内容。</li><li>-r: 从/var/spool/cron目录中删除某个用户的crontab文件，如果不指定用户，则默认删除当前用户的crontab文件。</li><li>-i: 在删除用户的crontab文件时给出确认提示。</li></ul><h2 id="crontab配置文件格式"><a href="#crontab配置文件格式" class="headerlink" title="crontab配置文件格式"></a>crontab配置文件格式</h2><p>配置文件地址</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta-keyword">/var/</span>spool<span class="meta-keyword">/cron/</span><span class="meta"># 该目录下存放每个用户的文件。</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>cron.d/<span class="meta"># 该目录用来存放任何要执行的crontab文件或脚本。</span></span><br><span class="line"><span class="meta-keyword">/etc/</span>crontab<span class="meta"># 该文件为默认的crontab配置文件</span></span><br></pre></td></tr></table></figure><p>/etc/crontab文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">SHELL=/bin/bash# 执行命令的shell绝对路径</span><br><span class="line">PATH=/sbin:/bin:/usr/sbin:/usr/bin# 设置PATH遍历</span><br><span class="line">MAILTO=root# 向root发送mail消息</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> For details see man 4 crontabs</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Example of job definition:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> .---------------- minute (0 - 59)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  .------------- hour (0 - 23)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  .---------- day of month (1 - 31)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> |  |  |  |  |</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> *  *  *  *  * user-name  <span class="built_in">command</span> to be executed</span></span><br></pre></td></tr></table></figure><p>分 时 日 月 周 执行用户 要运行的命令</p><ul><li>第一列为分钟0~59</li><li>第二列为小时0~23</li><li>第三列为日期1~31</li><li>第四列为月份1~12</li><li>第五列为星期几0~7</li><li>第六列为运行命令的用户</li><li>第7列为要运行的命令</li></ul><h1 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h1><h3 id="实例1每1分钟执行一次mycommand"><a href="#实例1：每1分钟执行一次myCommand" class="headerlink" title="实例1：每1分钟执行一次myCommand"></a>实例1：每1分钟执行一次myCommand</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* * * * *<span class="built_in"> user </span>myCommand</span><br></pre></td></tr></table></figure><h3 id="实例2每小时的第3和第15分钟执行"><a href="#实例2：每小时的第3和第15分钟执行" class="headerlink" title="实例2：每小时的第3和第15分钟执行"></a>实例2：每小时的第3和第15分钟执行</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 * * * *<span class="built_in"> user </span>myCommand</span><br></pre></td></tr></table></figure><h3 id="实例3在上午8点到11点的第3和第15分钟执行"><a href="#实例3：在上午8点到11点的第3和第15分钟执行" class="headerlink" title="实例3：在上午8点到11点的第3和第15分钟执行"></a>实例3：在上午8点到11点的第3和第15分钟执行</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * *<span class="built_in"> user </span>myCommand</span><br></pre></td></tr></table></figure><h3 id="实例4每隔两天的上午8点到11点的第3和第15分钟执行"><a href="#实例4：每隔两天的上午8点到11点的第3和第15分钟执行" class="headerlink" title="实例4：每隔两天的上午8点到11点的第3和第15分钟执行"></a>实例4：每隔两天的上午8点到11点的第3和第15分钟执行</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 */2  *  *<span class="built_in"> user </span>myCommand</span><br></pre></td></tr></table></figure><h3 id="实例5每周一上午8点到11点的第3和第15分钟执行"><a href="#实例5：每周一上午8点到11点的第3和第15分钟执行" class="headerlink" title="实例5：每周一上午8点到11点的第3和第15分钟执行"></a>实例5：每周一上午8点到11点的第3和第15分钟执行</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">3,15 8-11 * * 1<span class="built_in"> user </span>myCommand</span><br></pre></td></tr></table></figure><h3 id="实例6每晚的2130重启smb"><a href="#实例6：每晚的21-30重启smb" class="headerlink" title="实例6：每晚的21:30重启smb"></a>实例6：每晚的21:30重启smb</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">30 </span><span class="number">21</span> * * * user systemctl restart smb</span><br></pre></td></tr></table></figure><h3 id="实例7每月1-10-22日的4-45重启smb"><a href="#实例7：每月1、10、22日的4-45重启smb" class="headerlink" title="实例7：每月1、10、22日的4 : 45重启smb"></a>实例7：每月1、10、22日的4 : 45重启smb</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">45 </span><span class="number">4</span> <span class="number">1</span>,<span class="number">10</span>,<span class="number">22</span> * * user systemctl restart smb</span><br></pre></td></tr></table></figure><h3 id="实例8每周六-周日的1-10重启smb"><a href="#实例8：每周六、周日的1-10重启smb" class="headerlink" title="实例8：每周六、周日的1 : 10重启smb"></a>实例8：每周六、周日的1 : 10重启smb</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">10 </span><span class="number">1</span> * * <span class="number">6</span>,<span class="number">0</span> user systemctl restart smb</span><br></pre></td></tr></table></figure><h3 id="实例9每天18-00至23-00之间每隔30分钟重启smb"><a href="#实例9：每天18-00至23-00之间每隔30分钟重启smb" class="headerlink" title="实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb"></a>实例9：每天18 : 00至23 : 00之间每隔30分钟重启smb</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0,30 18-23 * * *<span class="built_in"> user </span>systemctl restart smb</span><br></pre></td></tr></table></figure><h3 id="实例10每星期六的晚上11-00-pm重启smb"><a href="#实例10：每星期六的晚上11-00-pm重启smb" class="headerlink" title="实例10：每星期六的晚上11 : 00 pm重启smb"></a>实例10：每星期六的晚上11 : 00 pm重启smb</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">23</span> * * <span class="number">6</span> user systemctl restart smb</span><br></pre></td></tr></table></figure><h3 id="实例11每一小时重启smb"><a href="#实例11：每一小时重启smb" class="headerlink" title="实例11：每一小时重启smb"></a>实例11：每一小时重启smb</h3><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">* */1 * * *<span class="built_in"> user </span>systemctl restart smb</span><br></pre></td></tr></table></figure><h3 id="实例12晚上11点到早上7点之间每隔一小时重启smb"><a href="#实例12：晚上11点到早上7点之间，每隔一小时重启smb" class="headerlink" title="实例12：晚上11点到早上7点之间，每隔一小时重启smb"></a>实例12：晚上11点到早上7点之间，每隔一小时重启smb</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="symbol">0 </span><span class="number">23</span>-<span class="number">7</span> * * * user systemctl restart smb</span><br></pre></td></tr></table></figure><h1 id="启动方法"><a href="#启动方法" class="headerlink" title="启动方法"></a>启动方法</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl <span class="literal">start</span> crond    <span class="comment">#启动服务</span></span><br><span class="line">sudo systemctl <span class="literal">stop</span> crond     <span class="comment">#关闭服务</span></span><br><span class="line">sudo systemctl restart crond  <span class="comment">#重启服务</span></span><br><span class="line">sudo systemctl reload crond   <span class="comment">#重新载入配置</span></span><br><span class="line">sudo systemctl status crond   <span class="comment">#查看服务状态</span></span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html" target="_blank" rel="noopener">http://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/crontab.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在产品运行环境上，需要大量的定时任务对系统环境进行监控及维护处理。此时使用crontab工具能方便的完成该部分操作。&lt;/p&gt;
    
    </summary>
    
      <category term="折腾笔记" scheme="http://www.flyl3una.cc/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://www.flyl3una.cc/tags/Linux/"/>
    
      <category term="crontab" scheme="http://www.flyl3una.cc/tags/crontab/"/>
    
      <category term="crond" scheme="http://www.flyl3una.cc/tags/crond/"/>
    
      <category term="定时任务" scheme="http://www.flyl3una.cc/tags/%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python Pandas使用</title>
    <link href="http://www.flyl3una.cc/2018/07/14/Python-pandas%E4%BD%BF%E7%94%A8/"/>
    <id>http://www.flyl3una.cc/2018/07/14/Python-pandas使用/</id>
    <published>2018-07-14T15:00:54.000Z</published>
    <updated>2018-09-12T07:06:43.540Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Pandas介绍</strong></p><p>pandas包含高级的数据结构和精巧的工具，使得Python处理数据非常快速和简单。pandas建立在NumPy之上，使得以NumPy为中心的应用很容易使用。</p><a id="more"></a><h1 id="pandas安装"><a href="#Pandas安装" class="headerlink" title="Pandas安装"></a>Pandas安装</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pandas</span><br></pre></td></tr></table></figure><p>建议使用anaconda，自带pandas</p><h1 id="pandas数据结构入门"><a href="#Pandas数据结构入门" class="headerlink" title="Pandas数据结构入门"></a>Pandas数据结构入门</h1><p>pandas有两个重要的数据结构：Series和DataFrame。这两个数据结构易用于大多数应用程序基础。</p><h2 id="series"><a href="#Series" class="headerlink" title="Series"></a>Series</h2><p>series使一个一维的类似数组的对象，包含一个数组的数据（任何NumPy的数据类型）和一个与数据关联的数组标签，叫做索引。</p><h3 id="series创建方法"><a href="#Series创建方法" class="headerlink" title="Series创建方法"></a>Series创建方法</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Series</span><span class="params">(data=None, index=None, dtype=None, name=None, copy=False, fastpath=False)</span></span></span><br></pre></td></tr></table></figure><ul><li>data: Series的数据源</li><li>index: Series的索引</li><li>dtype: 数据类型</li><li>name: 指定Series的名称，可以用Series.name访问。在DataFrame中，每一列的列明在该列单独取出来时就成了Series的名称</li></ul><p>最简单的Series由一个数组的数据构成</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> pandas <span class="keyword">import</span> Series</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj = Series([<span class="number">4</span>, <span class="number">65</span>, <span class="number">-4</span>, <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">65</span></span><br><span class="line"><span class="number">2</span>    <span class="number">-4</span></span><br><span class="line"><span class="number">3</span>     <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.values</span><br><span class="line">array([ <span class="number">4</span>, <span class="number">65</span>, <span class="number">-4</span>,  <span class="number">3</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index</span><br><span class="line">RangeIndex(start=<span class="number">0</span>, stop=<span class="number">4</span>, step=<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>可以看到索引是一个RangeIndex对象，值是一个array数组。</p><p>通常我们会创建一个带有索引来确定每个数据点的Series</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 = Series([<span class="number">4</span>, <span class="number">15</span>, <span class="number">-3</span>, <span class="number">0</span>, <span class="number">5</span>], index=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2.index</span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2.values</span><br><span class="line">array([ <span class="number">4</span>, <span class="number">15</span>, <span class="number">-3</span>,  <span class="number">0</span>,  <span class="number">5</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">a     <span class="number">4</span></span><br><span class="line">b    <span class="number">15</span></span><br><span class="line">c    <span class="number">-3</span></span><br><span class="line">d     <span class="number">0</span></span><br><span class="line">e     <span class="number">5</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>Series还可以通过dict来创建</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = &#123;<span class="string">'a'</span>: <span class="string">'a'</span>, <span class="string">'b'</span>: <span class="string">'b'</span>, <span class="string">'c'</span>: <span class="string">'c'</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Series(a)</span><br><span class="line">a    a</span><br><span class="line">b    b</span><br><span class="line">c    c</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><h3 id="series使用"><a href="#Series使用" class="headerlink" title="Series使用"></a>Series使用</h3><p>与Numpy数组相比，Seires可以使用索引里的值来选择一个单一值或一个值集。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2[<span class="string">'a'</span>]</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2[[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]]</span><br><span class="line">a     <span class="number">4</span></span><br><span class="line">b    <span class="number">15</span></span><br><span class="line">c    <span class="number">-3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>Numpy数组操作，对Series进行计算后，依旧会保持索引和值间的关联。</p><p>例如对Series进行布尔数组过滤，纯量计算，使用数学函数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2[obj2 &gt; <span class="number">0</span>]</span><br><span class="line">a     <span class="number">4</span></span><br><span class="line">b    <span class="number">15</span></span><br><span class="line">e     <span class="number">5</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2 ** <span class="number">2</span></span><br><span class="line">a     <span class="number">16</span></span><br><span class="line">b    <span class="number">225</span></span><br><span class="line">c      <span class="number">9</span></span><br><span class="line">d      <span class="number">0</span></span><br><span class="line">e     <span class="number">25</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>np.exp(obj2)</span><br><span class="line">a    <span class="number">5.459815e+01</span></span><br><span class="line">b    <span class="number">3.269017e+06</span></span><br><span class="line">c    <span class="number">4.978707e-02</span></span><br><span class="line">d    <span class="number">1.000000e+00</span></span><br><span class="line">e    <span class="number">1.484132e+02</span></span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p>Series中索引对应的值如果不存在，就会出现一个<strong>NAN</strong>值，表示为空，这在pandas中被用来标记数据缺失或<strong>NA</strong></p><p>值。pandas中使用函数<code>isnull</code>和<code>notnull</code>来检查数据丢失。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>values = &#123;<span class="number">1</span>: <span class="number">1</span>, <span class="number">2</span>: <span class="number">2</span>, <span class="number">3</span>: <span class="number">3</span>, <span class="number">4</span>: <span class="number">4</span>&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>indexs = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj5 = Series(values, index=indexs)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj5</span><br><span class="line"><span class="number">1</span>    <span class="number">1.0</span></span><br><span class="line"><span class="number">2</span>    <span class="number">2.0</span></span><br><span class="line"><span class="number">3</span>    <span class="number">3.0</span></span><br><span class="line"><span class="number">4</span>    <span class="number">4.0</span></span><br><span class="line"><span class="number">5</span>    NaN</span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj5.isnull()</span><br><span class="line"><span class="number">1</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">2</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">3</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">4</span>    <span class="keyword">False</span></span><br><span class="line"><span class="number">5</span>     <span class="keyword">True</span></span><br><span class="line">dtype: bool</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj5.notnull()</span><br><span class="line"><span class="number">1</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">2</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">3</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">4</span>     <span class="keyword">True</span></span><br><span class="line"><span class="number">5</span>    <span class="keyword">False</span></span><br><span class="line">dtype: bool</span><br></pre></td></tr></table></figure><p>Series的索引可以直接通过Series.index进行改变</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line"><span class="number">0</span>     <span class="number">4</span></span><br><span class="line"><span class="number">1</span>    <span class="number">65</span></span><br><span class="line"><span class="number">2</span>    <span class="number">-4</span></span><br><span class="line"><span class="number">3</span>     <span class="number">3</span></span><br><span class="line">dtype: int64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj.index=[<span class="string">'hah'</span>, <span class="string">'heihei'</span>, <span class="string">'hello'</span>, <span class="string">'world'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj</span><br><span class="line">hah        <span class="number">4</span></span><br><span class="line">heihei    <span class="number">65</span></span><br><span class="line">hello     <span class="number">-4</span></span><br><span class="line">world      <span class="number">3</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>Series对象本身和它的索引都有一个name属性，它和pandas的其他一些关键功能整合在一起。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2.name=<span class="string">'obj2'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2.index.name=<span class="string">'index'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj2</span><br><span class="line">index</span><br><span class="line">a     <span class="number">4</span></span><br><span class="line">b    <span class="number">15</span></span><br><span class="line">c    <span class="number">-3</span></span><br><span class="line">d     <span class="number">0</span></span><br><span class="line">e     <span class="number">5</span></span><br><span class="line">Name: obj2, dtype: int64</span><br></pre></td></tr></table></figure><h1 id="dataframe"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h1><p>一个DataFrame表示一个表格，类似电子表格的数据结构，包含一个经过排序的列表集，他们每一个都可以有不同的类型值(数字，字符串，布尔等)。DataFrame有行和列的索引；它可以被看做一个Series的字典，与其他（如R语言的data.frame）类似的DataFrame结构相比，在DataFrame里的面相行和面向列的操作大致是对称的。在底层，数据是作为一个或多个二位数组存储的，而不是列表、字典、或其他一维的数组集合。</p><blockquote><p>DataFrame在内部吧数据存储为一个二维数组格式，因此可以采用分层索引以表格格式来表示高纬度的数据。分层索引是pandas中许多先进的数据处理功能的关键因素。</p></blockquote><h2 id="dataframe创建"><a href="#DataFrame创建" class="headerlink" title="DataFrame创建"></a>DataFrame创建</h2><p>DataFrame定义</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DataFrame</span><span class="params">(data=None, index=None, columns=None, dtype=None, copy=False)</span></span></span><br></pre></td></tr></table></figure><ul><li>data: 数据源</li><li>Index: 索引</li><li>columns：列</li></ul><p>DataFrame与Series一样，如果不设置索引，索引会自动分配，并且对列进行了排序。</p><p>创建一个简单的DataFrame，常用的方法是用一个相同长度的列表的字典或Numpy数组进行创建。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data = &#123;<span class="string">'a'</span>: [<span class="string">'abc'</span>, <span class="string">'bcd'</span>, <span class="string">'cde'</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">'b'</span>: [<span class="string">'bbb'</span>, <span class="string">'ccc'</span>, <span class="string">'ddd'</span>],</span><br><span class="line"><span class="meta">... </span>    <span class="string">'c'</span>: [<span class="string">'cba'</span>, <span class="string">'dcb'</span>, <span class="string">'edc'</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data</span><br><span class="line">&#123;<span class="string">'a'</span>: [<span class="string">'abc'</span>, <span class="string">'bcd'</span>, <span class="string">'cde'</span>], <span class="string">'b'</span>: [<span class="string">'bbb'</span>, <span class="string">'ccc'</span>, <span class="string">'ddd'</span>], <span class="string">'c'</span>: [<span class="string">'cba'</span>, <span class="string">'dcb'</span>, <span class="string">'edc'</span>]&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame = DataFrame(data)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame</span><br><span class="line">     a    b    c</span><br><span class="line"><span class="number">0</span>  abc  bbb  cba</span><br><span class="line"><span class="number">1</span>  bcd  ccc  dcb</span><br><span class="line"><span class="number">2</span>  cde  ddd  edc</span><br></pre></td></tr></table></figure><p>DataFrame与Series一样，如果传递了一个行，但不包括在data中，结果中会表示为NA值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame1 = DataFrame(data, columns=[<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], index=[<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame1</span><br><span class="line">       a    b    c    d</span><br><span class="line"><span class="number">111</span>  abc  bbb  cba  NaN</span><br><span class="line"><span class="number">222</span>  bcd  ccc  dcb  NaN</span><br><span class="line"><span class="number">333</span>  cde  ddd  edc  NaN</span><br></pre></td></tr></table></figure><p>DataFrame与Series使用方式相同，可以通过字典激发或属性来检索。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame1.index</span><br><span class="line">Int64Index([<span class="number">111</span>, <span class="number">222</span>, <span class="number">333</span>], dtype=<span class="string">'int64'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame1.values</span><br><span class="line">array([[<span class="string">'abc'</span>, <span class="string">'bbb'</span>, <span class="string">'cba'</span>, nan],</span><br><span class="line">       [<span class="string">'bcd'</span>, <span class="string">'ccc'</span>, <span class="string">'dcb'</span>, nan],</span><br><span class="line">       [<span class="string">'cde'</span>, <span class="string">'ddd'</span>, <span class="string">'edc'</span>, nan]], dtype=object)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame1.columns</span><br><span class="line">Index([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], dtype=<span class="string">'object'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame1[<span class="string">'a'</span>]</span><br><span class="line"><span class="number">111</span>    abc</span><br><span class="line"><span class="number">222</span>    bcd</span><br><span class="line"><span class="number">333</span>    cde</span><br><span class="line">Name: a, dtype: object</span><br></pre></td></tr></table></figure><blockquote><p>如果通过嵌套字典格式传递到DataFrame，则外部建值会解释为列的索引，内部键会解释为行的索引</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>data1 = &#123;<span class="string">'a'</span>: &#123;<span class="number">1</span>: <span class="string">'11'</span>, <span class="number">2</span>: <span class="string">'22'</span>&#125;, <span class="string">'b'</span>: &#123;<span class="number">11</span>: <span class="string">'111'</span>, <span class="number">22</span>: <span class="string">'222'</span>&#125;, <span class="string">'c'</span>: &#123;<span class="string">'111'</span>: <span class="string">'1111'</span>, <span class="number">222</span>: <span class="string">'2222'</span>&#125;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>data2 = &#123;<span class="string">'a'</span>: &#123;<span class="number">1</span>: <span class="string">'11'</span>, <span class="number">2</span>: <span class="string">'22'</span>&#125;, <span class="string">'b'</span>: &#123;<span class="number">11</span>: <span class="string">'111'</span>, <span class="number">22</span>: <span class="string">'222'</span>&#125;, <span class="string">'c'</span>: &#123;<span class="string">'111'</span>: <span class="string">'1111'</span>, <span class="number">222</span>: &#123;<span class="string">'haha'</span>: <span class="string">'haha'</span>&#125;&#125;&#125;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>DataFrame(data1)</span><br><span class="line">       a    b     c</span><br><span class="line"><span class="number">1</span>     <span class="number">11</span>  NaN   NaN</span><br><span class="line"><span class="number">2</span>     <span class="number">22</span>  NaN   NaN</span><br><span class="line"><span class="number">11</span>   NaN  <span class="number">111</span>   NaN</span><br><span class="line"><span class="number">22</span>   NaN  <span class="number">222</span>   NaN</span><br><span class="line"><span class="number">111</span>  NaN  NaN  <span class="number">1111</span></span><br><span class="line"><span class="number">222</span>  NaN  NaN  <span class="number">2222</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>DataFrame(data2)</span><br><span class="line">       a    b                 c</span><br><span class="line"><span class="number">1</span>     <span class="number">11</span>  NaN               NaN</span><br><span class="line"><span class="number">2</span>     <span class="number">22</span>  NaN               NaN</span><br><span class="line"><span class="number">11</span>   NaN  <span class="number">111</span>               NaN</span><br><span class="line"><span class="number">22</span>   NaN  <span class="number">222</span>               NaN</span><br><span class="line"><span class="number">111</span>  NaN  NaN              <span class="number">1111</span></span><br><span class="line"><span class="number">222</span>  NaN  NaN  &#123;<span class="string">'haha'</span>: <span class="string">'haha'</span>&#125;</span><br></pre></td></tr></table></figure><p>Series也可以以相同方式来处理。</p><p>如果一个DataFrame的index和columns有name，也会被显示出来。</p><p>跟Series一样，values属性返回一个保护在DataFrame中的数组的二维ndarray。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame2 = DataFrame(data1)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame2.index.name = <span class="string">'frame_index_name'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame2.columns.name = <span class="string">'columns_name'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame2</span><br><span class="line">columns_name        a    b     c</span><br><span class="line">frame_index_name</span><br><span class="line"><span class="number">1</span>                  <span class="number">11</span>  NaN   NaN</span><br><span class="line"><span class="number">2</span>                  <span class="number">22</span>  NaN   NaN</span><br><span class="line"><span class="number">11</span>                NaN  <span class="number">111</span>   NaN</span><br><span class="line"><span class="number">22</span>                NaN  <span class="number">222</span>   NaN</span><br><span class="line"><span class="number">111</span>               NaN  NaN  <span class="number">1111</span></span><br><span class="line"><span class="number">222</span>               NaN  NaN  <span class="number">2222</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>二维ndarray</th><th>一个数据矩阵，有可选的行标和列标</th></tr></thead><tbody><tr><td>数组，列表或元组的字典</td><td>每一个序列成为DataFrame中的一列。所有的序列必须有相同的长度。</td></tr><tr><td>NumPy的结构/记录数组</td><td>和“数组字典”一样处理</td></tr><tr><td>Series的字典</td><td>每一个值成为一列。如果没有明显的传递索引，将结合每一个Series的索引来形成结果的行索引。</td></tr><tr><td>字典的字典</td><td>每一个内部的字典成为一列。和“Series的字典”一样，结合键值来形成行索引。</td></tr><tr><td>字典或Series的列表</td><td>每一项成为DataFrame中的一列。结合字典键或Series索引形成DataFrame的列标。</td></tr><tr><td>列表或元组的列表</td><td>和“二维ndarray”一样处理</td></tr><tr><td>另一个DataFrame</td><td>DataFrame的索引将被使用，除非传递另外一个</td></tr><tr><td>NumPy伪装数组（MaskedArray）</td><td>除了蒙蔽值在DataFrame中成为NA/丢失数据之外，其它的和“二维ndarray”一样</td></tr></tbody></table><h2 id="dataframe使用"><a href="#DataFrame使用" class="headerlink" title="DataFrame使用"></a>DataFrame使用</h2><blockquote><p>索引DataFrame是返回的列是一个底层数据的视窗，而不是一个拷贝。因此，任何在Series上对数据的修改都会直接影响DataFrame，列可以使用Series的copy函数来显示的拷贝。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">abc = frame[<span class="string">'a'</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame1</span><br><span class="line">       a    b    c    d</span><br><span class="line"><span class="number">111</span>  abc  bbb  cba  NaN</span><br><span class="line"><span class="number">222</span>  bcd  ccc  dcb  NaN</span><br><span class="line"><span class="number">333</span>  cde  ddd  edc  NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>abc.values[<span class="number">1</span>] = <span class="string">'fff'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame1</span><br><span class="line">       a    b    c    d</span><br><span class="line"><span class="number">111</span>  abc  bbb  cba  NaN</span><br><span class="line"><span class="number">222</span>  fff  ccc  dcb  NaN</span><br><span class="line"><span class="number">333</span>  cde  ddd  edc  NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bbb = frame[<span class="string">'a'</span>].copy()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bbb</span><br><span class="line"><span class="number">0</span>    abc</span><br><span class="line"><span class="number">1</span>    bcd</span><br><span class="line"><span class="number">2</span>    cde</span><br><span class="line">Name: a, dtype: object</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bbb.values[<span class="number">1</span>] = <span class="string">'haha'</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame1</span><br><span class="line">       a    b    c    d</span><br><span class="line"><span class="number">111</span>  abc  bbb  cba  NaN</span><br><span class="line"><span class="number">222</span>  fff  ccc  dcb  NaN</span><br><span class="line"><span class="number">333</span>  cde  ddd  edc  NaN</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>bbb</span><br><span class="line"><span class="number">0</span>     abc</span><br><span class="line"><span class="number">1</span>    haha</span><br><span class="line"><span class="number">2</span>     cde</span><br><span class="line">Name: a, dtype: object</span><br></pre></td></tr></table></figure><h2 id="索引对象"><a href="#索引对象" class="headerlink" title="索引对象"></a>索引对象</h2><blockquote><p>索引对象是不可变的</p><p>索引对象是不可变的</p></blockquote><table><thead><tr><th>Index</th><th>最通用的索引对象，使用Python对象的NumPy数组来表示坐标轴标签。</th></tr></thead><tbody><tr><td>Int64Index</td><td>对整形值的特化索引。</td></tr><tr><td>MultiIndex</td><td>“分层”索引对象，表示单个轴的多层次的索引。可以被认为是类似的元组的数组。</td></tr><tr><td>DatetimeIndex</td><td>存储纳秒时间戳（使用NumPy的datetime64 dtyppe来表示）。</td></tr><tr><td>PeriodIndex</td><td>对周期数据（时间间隔的）的特化索引。</td></tr></tbody></table><p>每个索引都有许多关于集合逻辑的方法和属性，且能够解决它所包含的数据的常见问题。</p><table><thead><tr><th>append</th><th>链接额外的索引对象，产生一个新的索引</th></tr></thead><tbody><tr><td>diff</td><td>计算索引的差集</td></tr><tr><td>intersection</td><td>计算交集</td></tr><tr><td>union</td><td>计算并集</td></tr><tr><td>isin</td><td>计算出一个布尔数组表示每一个值是否包含在所传递的集合里</td></tr><tr><td>delete</td><td>计算删除位置i的元素的索引</td></tr><tr><td>drop</td><td>计算删除所传递的值后的索引</td></tr><tr><td>insert</td><td>计算在位置i插入元素后的索引</td></tr><tr><td>is_monotonic</td><td>返回True，如果每一个元素都比它前面的元素大或相等</td></tr><tr><td>is_unique</td><td>返回True，如果索引没有重复的值</td></tr><tr><td>unique</td><td>计算索引的唯一值数组</td></tr></tbody></table><h1 id="使用pandas进行数据分析"><a href="#使用pandas进行数据分析" class="headerlink" title="使用pandas进行数据分析"></a>使用pandas进行数据分析</h1><h2 id="使用reindex来重建索引"><a href="#使用reindex来重建索引" class="headerlink" title="使用reindex来重建索引"></a>使用reindex来重建索引</h2><p>pandas对象的一个关键方法是reindex，该方法可以使数据符合一个新的索引来构造新的对象。</p><p>在Series上使用reindex重排数据，使他符合新的索引，如果索引值不存在则引入缺失数据值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj10 = Series([<span class="number">4.5</span>, <span class="number">7.2</span>, <span class="number">-5.3</span>, <span class="number">3.6</span>], index=[<span class="string">'d'</span>, <span class="string">'b'</span>, <span class="string">'a'</span>, <span class="string">'c'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj10</span><br><span class="line">d    <span class="number">4.5</span></span><br><span class="line">b    <span class="number">7.2</span></span><br><span class="line">a   <span class="number">-5.3</span></span><br><span class="line">c    <span class="number">3.6</span></span><br><span class="line">dtype: float64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj11 = obj10.reindex([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>, <span class="string">'e'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj11</span><br><span class="line">a   <span class="number">-5.3</span></span><br><span class="line">b    <span class="number">7.2</span></span><br><span class="line">c    <span class="number">3.6</span></span><br><span class="line">d    <span class="number">4.5</span></span><br><span class="line">e    NaN</span><br><span class="line">dtype: float64</span><br></pre></td></tr></table></figure><p><code>method</code>选项可以让重建索引时对值进行内插或填充，例如使用<code>ffill</code>方法前向填充值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj13 = Series([<span class="string">'blue'</span>, <span class="string">'purple'</span>, <span class="string">'yellow'</span>], index=[<span class="number">0</span>, <span class="number">2</span>, <span class="number">4</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj13.reindex(range(<span class="number">6</span>), method=<span class="string">'ffill'</span>)</span><br><span class="line"><span class="number">0</span>      blue</span><br><span class="line"><span class="number">1</span>      blue</span><br><span class="line"><span class="number">2</span>    purple</span><br><span class="line"><span class="number">3</span>    purple</span><br><span class="line"><span class="number">4</span>    yellow</span><br><span class="line"><span class="number">5</span>    yellow</span><br><span class="line">dtype: object</span><br></pre></td></tr></table></figure><p><code>reindex</code>的<code>method</code>提供的方法有</p><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td>ffill或pad</td><td>前向（或进位）填充</td></tr><tr><td>bfill或backfill</td><td>后向（或退位）填充</td></tr></tbody></table><p>对于DataFrame，reindex可以改变（行）索引、列或两则。当只传入一个序列时，结果中的行被重新索引了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame4 = DataFrame(np.arange(<span class="number">9</span>).reshape((<span class="number">3</span>, <span class="number">3</span>)), index=[<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>], columns=[<span class="string">'Ohio'</span>, <span class="string">'Texas'</span>, <span class="string">'California'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame4</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a     <span class="number">0</span>      <span class="number">1</span>           <span class="number">2</span></span><br><span class="line">c     <span class="number">3</span>      <span class="number">4</span>           <span class="number">5</span></span><br><span class="line">d     <span class="number">6</span>      <span class="number">7</span>           <span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame5 = frame4.reindex([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame5</span><br><span class="line">   Ohio  Texas  California</span><br><span class="line">a   <span class="number">0.0</span>    <span class="number">1.0</span>         <span class="number">2.0</span></span><br><span class="line">b   NaN    NaN         NaN</span><br><span class="line">c   <span class="number">3.0</span>    <span class="number">4.0</span>         <span class="number">5.0</span></span><br><span class="line">d   <span class="number">6.0</span>    <span class="number">7.0</span>         <span class="number">8.0</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame6 = frame4.reindex(columns=[<span class="string">'Texas'</span>, <span class="string">'Utah'</span>, <span class="string">'California'</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame6</span><br><span class="line">   Texas  Utah  California</span><br><span class="line">a      <span class="number">1</span>   NaN           <span class="number">2</span></span><br><span class="line">c      <span class="number">4</span>   NaN           <span class="number">5</span></span><br><span class="line">d      <span class="number">7</span>   NaN           <span class="number">8</span></span><br></pre></td></tr></table></figure><p>使用带标签索引的ix可以把重新索引做的更简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame</span><br><span class="line">columns_name    a    b    c</span><br><span class="line"><span class="number">0</span>             abc  bbb  cba</span><br><span class="line"><span class="number">1</span>             bcd  ccc  dcb</span><br><span class="line"><span class="number">2</span>             cde  ddd  edc</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame.ix[[<span class="number">-1</span>, <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>,], [<span class="string">'a'</span>, <span class="string">'c'</span>, <span class="string">'b'</span>]]</span><br><span class="line">columns_name    a    c    b</span><br><span class="line"><span class="number">-1</span>            NaN  NaN  NaN</span><br><span class="line"> <span class="number">0</span>            abc  cba  bbb</span><br><span class="line"> <span class="number">1</span>            bcd  dcb  ccc</span><br><span class="line"> <span class="number">2</span>            cde  edc  ddd</span><br></pre></td></tr></table></figure><p>reindex函数的参数</p><table><thead><tr><th>index</th><th>作为索引的新序列。可以是索引实例或任何类似序列的Python数据结构。一个索引被完全使用，没有任何拷贝。</th></tr></thead><tbody><tr><td>method</td><td>插值（填充）方法，见<a href="http://pda.readthedocs.io/en/latest/chp5.html#id8" target="_blank" rel="noopener">表格5-4</a>的选项</td></tr><tr><td>fill_value</td><td>代替重新索引时引入的缺失数据值</td></tr><tr><td>limit</td><td>当前向或后向填充时，最大的填充间隙</td></tr><tr><td>level</td><td>在多层索引上匹配简单索引，否则选择一个子集</td></tr><tr><td>copy</td><td>如果新索引与就的相等则底层数据不会拷贝。默认为True(即始终拷贝）</td></tr></tbody></table><h2 id="从一个坐标轴删除项目"><a href="#从一个坐标轴删除项目" class="headerlink" title="从一个坐标轴删除项目"></a>从一个坐标轴删除项目</h2><p>如果有一个索引数组或列表且没用这些条目，drop方法将返回一个新的对象并从坐标轴中删除指定的一个或多个值</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame.drop(<span class="number">0</span>)</span><br><span class="line">columns_name    a    b    c</span><br><span class="line"><span class="number">1</span>             bcd  ccc  dcb</span><br><span class="line"><span class="number">2</span>             cde  ddd  edc</span><br></pre></td></tr></table></figure><h2 id="索引过滤"><a href="#索引，过滤" class="headerlink" title="索引，过滤"></a>索引，过滤</h2><p>使用标签切片和正常的python切片不一样，它会吧结束点也包括在内。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>obj[<span class="string">'hah'</span>: <span class="string">'hello'</span>]</span><br><span class="line">hah        <span class="number">4</span></span><br><span class="line">heihei    <span class="number">65</span></span><br><span class="line">hello     <span class="number">-4</span></span><br><span class="line">dtype: int64</span><br></pre></td></tr></table></figure><p>索引DataFrame来检索一个或多个列</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>frame[[<span class="string">'a'</span>, <span class="string">'b'</span>]]</span><br><span class="line">columns_name    a    b</span><br><span class="line"><span class="number">0</span>             abc  bbb</span><br><span class="line"><span class="number">1</span>             bcd  ccc</span><br><span class="line"><span class="number">2</span>             cde  ddd</span><br></pre></td></tr></table></figure><p>下面有用父标签索引的都引入到了ix</p><table><thead><tr><th>obj[val]</th><th>从DataFrame选择单一列或连续列。特殊情况下的便利：布尔数组（过滤行），切片（行切片），或布尔DataFrame（根据一些标准来设置值）。</th></tr></thead><tbody><tr><td>obj.ix[val]</td><td>从DataFrame的行集选择单行</td></tr><tr><td>obj.ix[:, val]</td><td>从列集选择单列</td></tr><tr><td>obj.ix[val1, val2]</td><td>选择行和列</td></tr><tr><td>reindex 方法</td><td>转换一个或多个轴到新的索引</td></tr><tr><td>xs 方法</td><td>通过标签选择单行或单列到一个Series</td></tr><tr><td>icol, irow 方法</td><td>通过整数位置，分别的选择单行或单列到一个Series</td></tr><tr><td>get_value, set_value 方法</td><td>通过行和列标选择一个单值</td></tr></tbody></table><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="http://pda.readthedocs.io/en/latest/chp5.html" target="_blank" rel="noopener">http://pda.readthedocs.io/en/latest/chp5.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;Pandas介绍&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;pandas包含高级的数据结构和精巧的工具，使得Python处理数据非常快速和简单。pandas建立在NumPy之上，使得以NumPy为中心的应用很容易使用。&lt;/p&gt;
    
    </summary>
    
      <category term="科学计算" scheme="http://www.flyl3una.cc/categories/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="科学计算" scheme="http://www.flyl3una.cc/tags/%E7%A7%91%E5%AD%A6%E8%AE%A1%E7%AE%97/"/>
    
  </entry>
  
  <entry>
    <title>Python日志模块logging</title>
    <link href="http://www.flyl3una.cc/2018/06/27/Python%E6%97%A5%E5%BF%97%E6%A8%A1%E5%9D%97logging/"/>
    <id>http://www.flyl3una.cc/2018/06/27/Python日志模块logging/</id>
    <published>2018-06-27T09:50:30.000Z</published>
    <updated>2018-09-12T07:06:43.543Z</updated>
    
    <content type="html"><![CDATA[<p>在项目开发及维护中，日志是特别重要的。</p><p>python自带的logging库可以很好的完成日志功能。</p><a id="more"></a><h1 id="简单的日志功能"><a href="#简单的日志功能" class="headerlink" title="简单的日志功能"></a>简单的日志功能</h1><p><code>logging</code>模块提供了5种日志级别。</p><table><thead><tr><th>级别</th><th>值</th><th>描述</th></tr></thead><tbody><tr><td>CRITICAL(中断)</td><td>logging.CRITICAL(50)</td><td>严重错误，表明程序已经不能继续运行了。</td></tr><tr><td>ERROR(错误)</td><td>logging.ERROR(40)</td><td>严重的问题，程序已经不能执行一些功能了</td></tr><tr><td>WARNING(警告)</td><td>logging.WARNING(30)</td><td>程序可能会发生某些问题</td></tr><tr><td>INFO(信息)</td><td>logging.INFO(20)</td><td>普通信息，用来证明程序按预期工作</td></tr><tr><td>DEBUG(调试)</td><td>logging.DEBUG(10)</td><td>详细信息，只允许调试时查看的信息</td></tr></tbody></table><p>直接使用<code>logging.info()</code>, <code>logging.waring()</code>, <code>logging.error()</code>等方法默认将日志信息打印到屏幕上(stdout)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.info(<span class="string">'this is a log.'</span>)</span><br></pre></td></tr></table></figure><p>然而写日志目的就是将程序运行信息，错误信息等需要用来排错的信息输出到文件。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line">logging.basicConfig(filename=<span class="string">'example.log'</span>, level=logging.DEBUG, filemode=<span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># filemode = 'w' 每次运行，重写log</span></span><br><span class="line">logging.debug(<span class="string">'this is debug data.'</span>)</span><br><span class="line">logging.info(<span class="string">'this is info data.'</span>)</span><br><span class="line">logging.warning(<span class="string">'this is warn data.'</span>)</span><br></pre></td></tr></table></figure><p>查看文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">DEBUG:root:this is debug data.</span><br><span class="line">INFO:root:this is info data.</span><br><span class="line">WARNING:root:this is warn data.</span><br></pre></td></tr></table></figure><p>日志只会将日志内容级别大于等于日志文件级别的数据输出到日志文件中。</p><p>如果把level调到INFO，则日志文件中不会显示DEBUG那一行数据。</p><h1 id="详细的log日志"><a href="#详细的Log日志" class="headerlink" title="详细的Log日志"></a>详细的Log日志</h1><p>上述的日志输出太简单了。如果程序日志都是上述格式，大量日志将无法利用，无法定位错误。</p><p>日志的控制通过下面几个类实例来实现</p><ul><li><code>Logger</code>记录器：暴露了程序代码能直接使用的接口。</li><li><code>Handler</code>处理器：将记录器产生的日志记录发送到对应目的地。</li><li><code>Filter</code>过滤器，提供了更好的粒度控制，它可以决定输出哪些日志记录。</li><li><code>Formatter</code>格式化器，指明了最终输出中日志内容的格式。</li></ul><h2 id="logger记录器"><a href="#Logger记录器" class="headerlink" title="Logger记录器"></a>Logger记录器</h2><p>创建Logger</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logger = logging.getLogger(logger_name)</span><br></pre></td></tr></table></figure><blockquote><p>注意：Logger时一个树形级结构。一个Logger可以包含一个或多个Handler和Filter，即Logger与Handler或Filter是一对多的关系</p></blockquote><p>建议：logger_name使用全局变量<code>__name__</code>，可以避免名字冲突，还能很清楚的分辨是哪个日志。</p><p>创建<code>Logger</code>实例后，可以给日志设置级别，添加处理器handler。</p><ul><li><code>logger.setLevel(logging.INFO)</code>: 设置级日志别，低于该级别的日志不会被输出</li><li><code>logger.addHandler(handler_name)</code>: 为Logger实例添加一个处理器</li><li><code>logger.removeHandler(handler_name)</code>: 为Logger实例删除一个处理器</li></ul><h2 id="handler处理器"><a href="#Handler处理器" class="headerlink" title="Handler处理器"></a>Handler处理器</h2><p>handler处理器有很多种，常用的的有：<code>StreamHandler</code>, <code>FilterHandler</code>, <code>NullHandler</code>,（<code>RotatingFileHandler</code>, <code>TimeRotatingFileHandler</code>）。<code>RotatingFileHandler</code>和<code>TimeRotatingFileHandler</code>会自动回滚日志文件。</p><p><code>Handler</code>有下列方法</p><ul><li><code>handler.setLevel()</code>: 指定日志级别</li><li><code>handler.setFormatter()</code>: 设置一个格式化器</li><li><code>handler.addFilter()</code>: 添加一个过滤器，可以增加多个</li><li><code>handler.removeFilter()</code>: 删除一个过滤器</li></ul><p><strong>StreamHandler</strong> 创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler = logging.StreamHandler(stream=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p><strong>FileHandler</strong>创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler = logging.FileHandler(filename, mode=<span class="string">'a'</span>, encoding=<span class="keyword">None</span>, delay=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p><strong>RotatingFileHandler</strong>创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler = logging.handlers.RotatingFileHandler(filename, maxBytes=<span class="number">0</span>, backupCount=<span class="number">0</span>, encoding=<span class="keyword">None</span>, delay=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><p><code>maxBytes</code>：大于0时，表示日志文件接近maxBytes大小时会回滚日志文件。</p><p><code>backupCount</code>：最大存留的日志文件数，超出该文件数后，会自动删除最旧的日志文件。旧日志文件名为filename.log.(num)</p><p><strong>TimeRotatingFileHandler</strong>创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">handler = logging.handlers.RotatingFileHandler(filename, when=<span class="string">'h'</span>, interval=<span class="number">1</span>, backupCount=<span class="number">0</span>, encoding=<span class="keyword">None</span>, delay=<span class="keyword">False</span>, utc=<span class="keyword">False</span>, atTime=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p><code>when</code>: 表示根据时间回滚的时间周期，有s(econd), m(inute), h(our), d(ay), w(eek)。</p><p><code>interval</code>: 表示周期的数量，默认1为1个周期。</p><p><code>backupCount</code>: 最大存留日志文件数。旧日志文件名为filename.log.(TIME)</p><blockquote><p>日志回滚：默认日志为filename.log，回滚时会将该文件重命名为filename.log.xxx，再新建一个filename.log，并将日志句柄转移到新日志文件上。</p><p>建议在实际应用中使用TimeRotatingFileHandler方法，使用时间回滚日志，能更加快速定位日志信息。</p></blockquote><h2 id="formatter格式化器"><a href="#Formatter格式化器" class="headerlink" title="Formatter格式化器"></a>Formatter格式化器</h2><p>使用Formatter对象设置日志信息最后的规则、结构和内容，默认的时间格式为%Y-%m-%d %H:%M:%S。</p><p>创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">formatter = logging.Formatter(fmt=<span class="keyword">None</span>, default=<span class="keyword">None</span>)</span><br></pre></td></tr></table></figure><p>fmt为日志消息的格式化字符串，datefmt时日期字符串，如果不值命fmt，将使用<code>%(message)s</code>。如果不值命datefmt，将使用ISO8601日期格式。</p><h3 id="有用的format格式"><a href="#有用的format格式" class="headerlink" title="有用的format格式"></a>有用的format格式</h3><table><thead><tr><th>格式</th><th>描述</th></tr></thead><tbody><tr><td>%(levelno)s</td><td>打印日志级别的数值</td></tr><tr><td>%(levelname)s</td><td>打印日志级别名称</td></tr><tr><td>%(pathname)s</td><td>打印当前执行程序的路径</td></tr><tr><td>%(filename)s</td><td>打印当前执行程序名称</td></tr><tr><td>%(funcName)s</td><td>打印日志的当前函数</td></tr><tr><td>%(lineno)d</td><td>打印日志的当前行号</td></tr><tr><td>%(asctime)s</td><td>打印日志的时间</td></tr><tr><td>%(thread)d</td><td>打印线程id</td></tr><tr><td>%(threadName)s</td><td>打印线程名称</td></tr><tr><td>%(process)d</td><td>打印进程ID</td></tr><tr><td>%(message)s</td><td>打印日志信息</td></tr></tbody></table><h2 id="filter过滤器"><a href="#Filter过滤器" class="headerlink" title="Filter过滤器"></a>Filter过滤器</h2><p>Handlers和Loggers可以使用Filters来完成比级别更复杂的过滤。Filter基类只允许特定Logger层次以下的事件。</p><p>创建方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">filter = logging.Filter(name=<span class="string">''</span>)</span><br></pre></td></tr></table></figure><h1 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h1><ul><li>显示创建记录器Logger、处理器Handler和格式化器Formatter，并进行配置</li><li>通过简单方式进行配置，使用<code>basicConfig()</code>函数直接进行配置</li><li>通过配置文件进行配置，使用<code>fileConfig()</code>函数读取配置文件</li><li>通过配置字典进行配置，使用<code>dictConfig()</code> 函数读取配置信息</li><li>通过网络进行配置，使用<code>listen()</code>函数进行网络配置</li></ul><h2 id="basicconfig关键字参数"><a href="#basicConfig关键字参数" class="headerlink" title="basicConfig关键字参数"></a>basicConfig关键字参数</h2><table><thead><tr><th>关键字</th><th>描述</th></tr></thead><tbody><tr><td>filename</td><td>创建一个FileHandler，使用指定的文件名，而不是使用StreamHandler。</td></tr><tr><td>filemode</td><td>如果指明了文件名，指明打开文件的模式（如果没有指明filemode，默认为’a’）。</td></tr><tr><td>format</td><td>handler使用指明的格式化字符串。</td></tr><tr><td>datefmt</td><td>使用指明的日期／时间格式。</td></tr><tr><td>level</td><td>指明根logger的级别。</td></tr><tr><td>stream</td><td>使用指明的流来初始化StreamHandler。该参数与’filename’不兼容，如果两个都有，’stream’被忽略。</td></tr></tbody></table><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><p>一个简单的写文件日志实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- encoding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"></span><br><span class="line"><span class="comment"># create logger</span></span><br><span class="line">logger_name = <span class="string">"example"</span></span><br><span class="line">logger = logging.getLogger(logger_name)</span><br><span class="line">logger.setLevel(logging.DEBUG)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create file handler</span></span><br><span class="line">log_path = <span class="string">"./log.log"</span></span><br><span class="line">fh = logging.FileHandler(log_path, when=<span class="string">'d'</span>)</span><br><span class="line">fh.setLevel(logging.WARN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># create formatter</span></span><br><span class="line">fmt = <span class="string">"%(asctime)-15s %(levelname)s %(filename)s %(lineno)d %(process)d %(message)"</span></span><br><span class="line">datefmt = <span class="string">"%a %d %b %Y %H:%M:%S"</span></span><br><span class="line">formatter = logging.Formatter(fmt, datefmt)</span><br><span class="line"></span><br><span class="line"><span class="comment"># add handler and formatter to logger</span></span><br><span class="line">fh.setFormatter(formatter)</span><br><span class="line">logger.addHandler(fh)</span><br><span class="line"></span><br><span class="line"><span class="comment"># print log info</span></span><br><span class="line">logger.debug(<span class="string">'debug message'</span>)</span><br><span class="line">logger.info(<span class="string">'info message'</span>)</span><br><span class="line">logger.warn(<span class="string">'warn message'</span>)</span><br><span class="line">logger.error(<span class="string">'error message'</span>)</span><br><span class="line">logger.critical(<span class="string">'critical message'</span>)</span><br></pre></td></tr></table></figure><p>下面为创建一个日志工厂类，可以生成一个基于<code>StreamHandler</code>输出到屏幕或者创建<code>TimeRotatingFileHandler</code>输出到文件的日志对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">import</span> logging.handlers</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">setting = &#123;</span><br><span class="line">    <span class="string">'RUN_ENV'</span>: <span class="string">'debug'</span>,</span><br><span class="line">    <span class="string">'ROOT_LOG_DIR'</span>: <span class="string">'/var/log/'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_current_user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    获取当前用户</span></span><br><span class="line"><span class="string">    :return: 当前用户 or ''</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    status, stdout = subprocess.getstatusoutput(<span class="string">'id -un'</span>)</span><br><span class="line">    <span class="keyword">if</span> status:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> stdout.strip()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LogFactory</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, log_name, project=<span class="string">''</span>, log_level=None, handler_type=<span class="string">'file'</span>, date_file=True, rotate=<span class="string">'H'</span>, backupCount=<span class="number">30</span>, task_id=<span class="string">''</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        使用LogFactory生成一个日志对象</span></span><br><span class="line"><span class="string">        :param log_name: 日志模块名称,日志位于setting['ROOT_LOG_DIR']/log_name/user文件中</span></span><br><span class="line"><span class="string">        :param log_level: 日志级别，只允许logging.INFO,logging.DEBUG, logging.WARN, logging.ERROR, logging.CRITICAL</span></span><br><span class="line"><span class="string">        :param project: 项目名称，若handler_type为file，则日志目录为log_segging.ROOT_LOG_DIR / project / .</span></span><br><span class="line"><span class="string">        :param handler_type: 日志流类型，允许file或者console,默认为file</span></span><br><span class="line"><span class="string">        :param rotate: 日志回滚周期，s/S(econds),m/M(inute),h/H(our),d/D(ay),w/W(eek)，默认为小时, </span></span><br><span class="line"><span class="string">        :param backupCount: 日志备份日期，默认30小时</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.log_level = log_level</span><br><span class="line">        self.log_name = log_name.split(<span class="string">'.'</span>)[<span class="number">0</span>]</span><br><span class="line">        self.handler_type = handler_type</span><br><span class="line">        self.date_file = date_file</span><br><span class="line">        self.project = project</span><br><span class="line">        self.rotate = rotate</span><br><span class="line">        self.backupCount = backupCount</span><br><span class="line">        self.task_id = <span class="string">'_'</span> + str(task_id) <span class="keyword">if</span> task_id <span class="keyword">else</span> <span class="string">''</span></span><br><span class="line">        self.logger = self.get_logger()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> self.logger:</span><br><span class="line">                error_info = [</span><br><span class="line">                    <span class="string">'self.log_name:'</span> + str(self.log_name),</span><br><span class="line">                    <span class="string">'self.log_level:'</span> + str(self.log_level),</span><br><span class="line">                    <span class="string">'self.handler_type:'</span> + str(self.handler_type),</span><br><span class="line">                    <span class="string">'self.projcect:'</span> + str(self.project),</span><br><span class="line">                    <span class="string">'self.date_file:'</span> + str(self.date_file)</span><br><span class="line">                ]</span><br><span class="line">                <span class="keyword">raise</span> Exception(<span class="string">"get logger error.\tself info:\n"</span>+<span class="string">'\n'</span>.join(error_info))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">raise</span> SystemExit(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.import_log_funcs()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_logger</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取日志对象</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">            logger对象：成功</span></span><br><span class="line"><span class="string">            0：level或者type错误</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment">#判断运行环境</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.log_level:</span><br><span class="line">            <span class="keyword">if</span> setting[<span class="string">'RUN_ENV'</span>] == <span class="string">'debug'</span>:</span><br><span class="line">                self.log_level = logging.DEBUG</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                self.log_level = logging.INFO</span><br><span class="line">        <span class="comment"># 分为不同类型的handler生成不同的日志对象</span></span><br><span class="line">        <span class="keyword">if</span> self.handler_type == <span class="string">'file'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.get_file_logger()</span><br><span class="line">        <span class="keyword">elif</span> self.handler_type == <span class="string">'console'</span>:</span><br><span class="line">            <span class="keyword">return</span> self.get_console_logger()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_file_logger</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取一个文件类型日志对象</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">            logger对象：成功</span></span><br><span class="line"><span class="string">            0：level或者type错误</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># 如果self.project存在，则该日志目录位于log_root/project下</span></span><br><span class="line">            <span class="keyword">if</span> self.project <span class="keyword">is</span> <span class="string">''</span>:</span><br><span class="line">                log_root = setting[<span class="string">'ROOT_LOG_DIR'</span>]</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                log_root = os.path.join(setting[<span class="string">'ROOT_LOG_DIR'</span>], self.project.lstrip(<span class="string">'/'</span>))</span><br><span class="line">                <span class="comment"># 如果日志目录不存在，则创建目录。</span></span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(log_root):</span><br><span class="line">                os.mkdir(log_root)</span><br><span class="line">            <span class="comment"># 使用用户名加日期为目录或文件名。</span></span><br><span class="line">                current_user = get_current_user()</span><br><span class="line">            log_path = os.path.join(log_root, self.log_name, current_user + self.task_id + <span class="string">'.log'</span>)</span><br><span class="line">            logger = logging.getLogger(<span class="string">'.'</span>.join([self.log_name, current_user]))</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 创建一个以日志文件大小回滚的日志对象</span></span><br><span class="line">            <span class="comment"># fh = logging.handlers.RotatingFileHandler(log_path)</span></span><br><span class="line">            <span class="comment"># 创建一个以时间回滚的日志对象</span></span><br><span class="line">            fh = logging.handlers.TimedRotatingFileHandler(log_path, when=self.rotate, backupCount=self.backupCount)</span><br><span class="line">            <span class="comment"># fh.suffix += '.log'</span></span><br><span class="line">            fh.setLevel(self.log_level)</span><br><span class="line">            fh.setFormatter(self.get_formatter())</span><br><span class="line">            logger.setLevel(self.log_level)</span><br><span class="line">            logger.addHandler(fh)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            print(<span class="string">'log_path:'</span>, log_path)</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_console_logger</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取一个stderr流类型日志对象</span></span><br><span class="line"><span class="string">        :return:</span></span><br><span class="line"><span class="string">            logger对象：成功</span></span><br><span class="line"><span class="string">            0：level或者type错误</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            logger = logging.getLogger(self.log_name)</span><br><span class="line">            ch = logging.StreamHandler(stream=sys.stdout)</span><br><span class="line">            ch.setLevel(self.log_level)</span><br><span class="line">            ch.setFormatter(self.get_formatter())</span><br><span class="line">            logger.setLevel(self.log_level)</span><br><span class="line">            logger.addHandler(ch)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            traceback.print_exc()</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">        <span class="keyword">return</span> logger</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_formatter</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        获取一个日志输出格式</span></span><br><span class="line"><span class="string">        :return: logging库的Formatter匹配对象formatter</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="comment"># return logging.Formatter('%(asctime)s &lt;%(filename)s line:%(lineno)d&gt; %(levelname)s - %(message)s')</span></span><br><span class="line">        <span class="keyword">return</span> logging.Formatter(<span class="string">'[%(asctime)s &lt;%(pathname)s-%(funcName)s:%(lineno)d&gt;](%(levelname)s):%(message)s'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">import_log_funcs</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        将logging的输出日志函数导出到该类</span></span><br><span class="line"><span class="string">        :return: 0</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> self.logger:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">'not have logger.'</span>)</span><br><span class="line">        log_funcs = [<span class="string">'info'</span>, <span class="string">'warning'</span>, <span class="string">'error'</span>, <span class="string">'critical'</span>, <span class="string">'exception'</span>]</span><br><span class="line">        <span class="keyword">if</span> setting[<span class="string">'RUN_ENV'</span>] == <span class="string">'debug'</span>:</span><br><span class="line">            log_funcs.append(<span class="string">'debug'</span>)</span><br><span class="line">        <span class="keyword">for</span> func_name <span class="keyword">in</span> log_funcs:</span><br><span class="line">            func = getattr(self.logger, func_name)</span><br><span class="line">            setattr(self, func_name, func)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">trace</span><span class="params">(self, number=<span class="number">10</span>)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        将栈错误信息输入日志，level为error。默认栈为3层</span></span><br><span class="line"><span class="string">        :param number: 想要打印的栈信息层数</span></span><br><span class="line"><span class="string">        :return: 0</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">if</span> setting[<span class="string">'RUN_ENV'</span>] != <span class="string">'debug'</span>:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line">        info = sys.exc_info()</span><br><span class="line">        <span class="keyword">if</span> number &gt;= len(info):</span><br><span class="line">            number = len(info)<span class="number">-1</span></span><br><span class="line">        <span class="keyword">for</span> file, line, func, text <span class="keyword">in</span> traceback.extract_tb(info[number]):</span><br><span class="line">            self.error(<span class="string">'%s line:%s in %s:%s'</span> % (file, line, func, text))</span><br><span class="line">        self.error(<span class="string">'%s: %s'</span> % info[:number])</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span><span class="params">(mlogger)</span>:</span></span><br><span class="line">    mlogger.info(<span class="string">'xxx'</span>)</span><br><span class="line">    mlogger.debug(<span class="string">'abc'</span>)</span><br><span class="line">    mlogger.warning(<span class="string">'asc'</span>)</span><br><span class="line">    mlogger.error(<span class="string">'dssa'</span>)</span><br><span class="line">    mlogger.critical(<span class="string">'crit'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test_log = LogFactory(<span class="string">'test'</span>, handler_type=<span class="string">'file'</span>, project=<span class="string">'test'</span>, rotate=<span class="string">'h'</span>, backupCount=<span class="number">24</span>*<span class="number">30</span>)</span><br><span class="line">    test(test_log)</span><br></pre></td></tr></table></figure><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="https://docs.python.org/3.6/howto/logging.html" target="_blank" rel="noopener">官方文档</a></p><p><a href="https://docs.python.org/3/library/time.html?highlight=strftime#time.strftime" target="_blank" rel="noopener">Formatter配置</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在项目开发及维护中，日志是特别重要的。&lt;/p&gt;
&lt;p&gt;python自带的logging库可以很好的完成日志功能。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="日志" scheme="http://www.flyl3una.cc/tags/%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
  <entry>
    <title>python单元测试</title>
    <link href="http://www.flyl3una.cc/2018/06/24/python%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    <id>http://www.flyl3una.cc/2018/06/24/python单元测试/</id>
    <published>2018-06-24T06:44:50.000Z</published>
    <updated>2018-09-12T07:06:43.555Z</updated>
    
    <content type="html"><![CDATA[<p>在一个项目中，单元测试可以很有效的排除bug。</p><p>单元测试可以对单个模块、函数、类进行正确性检验测试。</p><p>如果对某个功能进行了修改，只需要使用单元测试再跑一次，通过就可以说明修改正确，没有影响到原有的功能行为。</p><a id="more"></a><h1 id="unittest模块"><a href="#unittest模块" class="headerlink" title="unittest模块"></a>unittest模块</h1><p>python自带了unittest模块，用来进行单元测试功能。</p><p>编写单元测试时，需要编写一个测试类，从<code>unittest.TestCase</code>类继承，</p><p>以<code>test</code>开头的方法就是测试方法，不以<code>test</code>开头的方法不被认为是测试方法，测试的时候不会执行。</p><p>对每一个类测试都需要编写一个<code>test_xxx()</code>方法。由于<code>unittest.TestCase</code>提供了很多内置的条件判断，只需要调用这些方法就可以断言输出是否是我们所期望的。最常用的断言就是<code>assertEqual()</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.assertEqual(abs(<span class="number">-1</span>), <span class="number">1</span>)<span class="comment">#断言判断函数返回的结果是否等于1</span></span><br></pre></td></tr></table></figure><p>另一个重要的断言是期待抛出指定类型的Error，比如通过<code>d[&#39;empty&#39;]</code>访问不存在的key时，断言是否会抛出<code>KeyError</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> self.assertRaises(KeyError):</span><br><span class="line">value = d[<span class="string">'empty'</span>]</span><br></pre></td></tr></table></figure><p>而通过<code>d.empty</code>访问不存在的key时，我们期待抛出<code>AttributeError</code>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">with</span> self.assertRaise(AttributeError):</span><br><span class="line">    value = d.empty</span><br></pre></td></tr></table></figure><h1 id="运行单元测试"><a href="#运行单元测试" class="headerlink" title="运行单元测试"></a>运行单元测试</h1><p>写完单元测试后，运行单元测试的方法是在<code>my_test.py</code>的最后加上两行代码</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br></pre></td></tr></table></figure><p>这样就可以把<code>my_test.py</code>当做正常的python脚步运行。</p><p>另外一个方法是在命令行通过<code>-m unittest</code>直接运行单元测试，跟运行pdb方式类似。</p><p><strong>setUp()和tearDown()</strong></p><p>单元测试中提供给两个特殊的<code>setUp()</code>和<code>tearDown()</code>方法。这两个方法会在每调用一个测试方法的前后分别被执行。</p><p>示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> unittest</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, score)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.score = score</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_grade</span><span class="params">(self)</span>:</span></span><br><span class="line">        level = <span class="string">'C'</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">60</span>:</span><br><span class="line">            level = <span class="string">'B'</span></span><br><span class="line">        <span class="keyword">if</span> self.score &gt;= <span class="number">80</span>:</span><br><span class="line">            level = <span class="string">'A'</span></span><br><span class="line">        <span class="keyword">return</span> level</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestStudent</span><span class="params">(unittest.TestCase)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_80_to_100</span><span class="params">(self)</span>:</span></span><br><span class="line">        s1 = Student(<span class="string">'Bart'</span>, <span class="number">80</span>)</span><br><span class="line">        s2 = Student(<span class="string">'Lisa'</span>, <span class="number">100</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">'A'</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">'A'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_60_to_80</span><span class="params">(self)</span>:</span></span><br><span class="line">        s1 = Student(<span class="string">'Bart'</span>, <span class="number">60</span>)</span><br><span class="line">        s2 = Student(<span class="string">'Lisa'</span>, <span class="number">79</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">'B'</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">'B'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_0_to_60</span><span class="params">(self)</span>:</span></span><br><span class="line">        s1 = Student(<span class="string">'Bart'</span>, <span class="number">0</span>)</span><br><span class="line">        s2 = Student(<span class="string">'Lisa'</span>, <span class="number">59</span>)</span><br><span class="line">        self.assertEqual(s1.get_grade(), <span class="string">'C'</span>)</span><br><span class="line">        self.assertEqual(s2.get_grade(), <span class="string">'C'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">test_invalid</span><span class="params">(self)</span>:</span></span><br><span class="line">        s1 = Student(<span class="string">'Bart'</span>, <span class="keyword">None</span>)</span><br><span class="line">        s2 = Student(<span class="string">'Lisa'</span>, <span class="string">'101'</span>)</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(Exception):</span><br><span class="line">            s1.get_grade()</span><br><span class="line">        <span class="keyword">with</span> self.assertRaises(Exception):</span><br><span class="line">            s2.get_grade()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    unittest.main()</span><br><span class="line">    <span class="comment"># suite = unittest.TestLoader().loadTestsFromTestCase(TestStudent)</span></span><br><span class="line">    <span class="comment"># unittest.TextTestRunner(verbosity=2).run(suite)</span></span><br></pre></td></tr></table></figure><p>建议在项目中建一个test模块，里面编写各个功能的单元测试，每次修改代码后跑通单元测试再提交给测试组测试。单元测试能极大的避免简单的bug。大大减少bug数量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在一个项目中，单元测试可以很有效的排除bug。&lt;/p&gt;
&lt;p&gt;单元测试可以对单个模块、函数、类进行正确性检验测试。&lt;/p&gt;
&lt;p&gt;如果对某个功能进行了修改，只需要使用单元测试再跑一次，通过就可以说明修改正确，没有影响到原有的功能行为。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="单元测试" scheme="http://www.flyl3una.cc/tags/%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Python并发框架tornado</title>
    <link href="http://www.flyl3una.cc/2018/06/23/Python%E5%B9%B6%E5%8F%91%E6%A1%86%E6%9E%B6tornado/"/>
    <id>http://www.flyl3una.cc/2018/06/23/Python并发框架tornado/</id>
    <published>2018-06-22T17:00:48.000Z</published>
    <updated>2018-09-12T07:06:43.542Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Tornado 介绍</p></blockquote><p>Tornado是一个基于epoll IO复用模型的异步IO库。tornado提供了ioloop用于支持TCP/UDP并发库，httpserver提供非阻塞Http Server。</p><a id="more"></a><h1 id="基于tornado的异步tcp服务端"><a href="#基于tornado的异步TCP服务端" class="headerlink" title="基于tornado的异步TCP服务端"></a>基于tornado的异步TCP服务端</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.tcpserver <span class="keyword">import</span> TCPServer</span><br><span class="line"><span class="keyword">from</span> tornado.ioloop <span class="keyword">import</span> IOLoop</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, stream, address)</span>:</span></span><br><span class="line">        self._stream = stream</span><br><span class="line">        self._address = address</span><br><span class="line">        self._stream.set_close_callback(self.on_close)</span><br><span class="line">        self.read_message()</span><br><span class="line">        print(<span class="string">"Client connection from:"</span>, address)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">read_message</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._stream.read_until(<span class="string">b'\n'</span>, self.reverse_messages)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">reverse_messages</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        data = data.decode(<span class="string">'utf8'</span>)[:<span class="number">-1</span>]</span><br><span class="line">        print(<span class="string">"Recv:"</span>, data, self._address)</span><br><span class="line">        data = data[<span class="number">-1</span>::<span class="number">-1</span>] + <span class="string">'\n'</span></span><br><span class="line">        self.send_message(data)</span><br><span class="line">        self.read_message()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send_message</span><span class="params">(self, data)</span>:</span></span><br><span class="line">        self._stream.write(data.encode(<span class="string">'utf8'</span>))</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">on_close</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Client close."</span>, self._address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ChatServer</span><span class="params">(TCPServer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">handle_stream</span><span class="params">(self, stream, address)</span>:</span></span><br><span class="line">        print(<span class="string">"New connection :"</span>, address, stream)</span><br><span class="line">        Connection(stream, address)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    print(<span class="string">"Server start ......"</span>)</span><br><span class="line">    server = ChatServer()</span><br><span class="line">    server.listen(<span class="number">8000</span>)</span><br><span class="line">    IOLoop.instance().start()</span><br></pre></td></tr></table></figure><p>此服务端将接收到数据，并反转字符串发送给所有用户。</p><p>使用两个nc连接8000端口并发送数据</p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ nc <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="number">8000</span></span><br><span class="line">haha</span><br><span class="line">ahah</span><br><span class="line">hello</span><br><span class="line">olleh</span><br></pre></td></tr></table></figure><p>服务端输出</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Server <span class="keyword">start</span> ......</span><br><span class="line"><span class="keyword">New</span> <span class="keyword">connection</span> : (<span class="string">'127.0.0.1'</span>, <span class="number">37388</span>) &lt;tornado.iostream.IOStream <span class="keyword">object</span> <span class="keyword">at</span> <span class="number">0x7f3f99f3da90</span>&gt;</span><br><span class="line"><span class="keyword">Client</span> <span class="keyword">connection</span> <span class="keyword">from</span>: (<span class="string">'127.0.0.1'</span>, <span class="number">37388</span>)</span><br><span class="line">Recv: haha (<span class="string">'127.0.0.1'</span>, <span class="number">37388</span>)</span><br><span class="line">Recv: hello (<span class="string">'127.0.0.1'</span>, <span class="number">37388</span>)</span><br><span class="line"><span class="keyword">New</span> <span class="keyword">connection</span> : (<span class="string">'127.0.0.1'</span>, <span class="number">37400</span>) &lt;tornado.iostream.IOStream <span class="keyword">object</span> <span class="keyword">at</span> <span class="number">0x7f3f9376e7f0</span>&gt;</span><br><span class="line"><span class="keyword">Client</span> <span class="keyword">connection</span> <span class="keyword">from</span>: (<span class="string">'127.0.0.1'</span>, <span class="number">37400</span>)</span><br><span class="line">Recv: haha (<span class="string">'127.0.0.1'</span>, <span class="number">37400</span>)</span><br></pre></td></tr></table></figure><p>在tcpserver.py文件的第287:298行可以看到</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> self.ssl_options <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">stream = SSLIOStream(connection,</span><br><span class="line">max_buffer_size=self.max_buffer_size,</span><br><span class="line">read_chunk_size=self.read_chunk_size)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    stream = IOStream(connection,</span><br><span class="line">max_buffer_size=self.max_buffer_size,</span><br><span class="line">read_chunk_size=self.read_chunk_size)</span><br><span class="line">future = self.handle_stream(stream, address)</span><br><span class="line"><span class="keyword">if</span> future <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">IOLoop.current().add_future(gen.convert_yielded(future),</span><br><span class="line"><span class="keyword">lambda</span> f: f.result())</span><br></pre></td></tr></table></figure><p>_stream是一个tornado封装的IOSStream或SSLIOSStream对象。</p><p>IOSStream类的<code>read_until(self, delimiter, callback=None, max-bytes=None)</code>方法提供读取数据直到获取到delimiter。上面设置为读取到’\n’数据进行操作。</p><p>IOSStream类还提供了<code>read_bytes()</code>方法来读取指定数量的字节。</p><p>IOSStream类提供了<code>write()</code>方法来将指定的buffer写入socket并持续检测直到buffer被发送。</p><p><code>ChatServer</code>继承与TCPServer类。必须复写hande_stream方法。该方法在TCPServer接到新连接时会被调用，且传入连接的stream数据流和address连接地址。</p><h1 id="异步http服务器"><a href="#异步HTTP服务器" class="headerlink" title="异步HTTP服务器"></a>异步HTTP服务器</h1><h2 id="创建一个简单的服务器"><a href="#创建一个简单的服务器" class="headerlink" title="创建一个简单的服务器"></a>创建一个简单的服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MainHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        query = self.get_argument(<span class="string">'q'</span>, <span class="string">'World'</span>)</span><br><span class="line">        self.write(<span class="string">"&lt;h1&gt;Hello, %s&lt;/h1&gt;"</span> % query)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">post</span><span class="params">(self)</span>:</span></span><br><span class="line">        query = self.get_argument(<span class="string">'name'</span>, <span class="string">'Luna'</span>)</span><br><span class="line">        self.write(<span class="string">'Hi, '</span> + query)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    application = tornado.web.Application([</span><br><span class="line">        (<span class="string">r"/"</span>, MainHandler),</span><br><span class="line">    ])</span><br><span class="line">    application.listen(<span class="number">8888</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure><p>使用curl请求结果如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl http://localhost:8888/?q=Luna</span></span><br><span class="line">&lt;h1&gt;Hello, Luna&lt;/h1&gt;</span><br></pre></td></tr></table></figure><h2 id="创建一个异步服务器"><a href="#创建一个异步服务器" class="headerlink" title="创建一个异步服务器"></a>创建一个异步服务器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.httpserver</span><br><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">import</span> tornado.httpclient</span><br><span class="line"><span class="keyword">import</span> tornado.gen</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line">define(<span class="string">"port"</span>, default=<span class="number">8000</span>, help=<span class="string">"run on the given port"</span>, type=int)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line"><span class="meta">    @tornado.web.asynchronous</span></span><br><span class="line"><span class="meta">    @tornado.gen.engine</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        body = json.dumps(&#123;<span class="string">'name'</span>: <span class="string">'L3una'</span>&#125;)</span><br><span class="line">        client = tornado.httpclient.AsyncHTTPClient()</span><br><span class="line">        response = <span class="keyword">yield</span> tornado.gen.Task(</span><br><span class="line">            client.fetch,</span><br><span class="line">            <span class="string">'http://localhost:8888/'</span>,  <span class="comment"># 替换有效url</span></span><br><span class="line">            method=<span class="string">'POST'</span>,</span><br><span class="line">            body=body,</span><br><span class="line">        )</span><br><span class="line">        self.write(response.body)</span><br><span class="line">        self.finish()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line">if __name__ == "__main__":</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    app = tornado.web.Application(</span><br><span class="line">        handlers=[</span><br><span class="line">            (<span class="string">r"/"</span>, IndexHandler)</span><br><span class="line">        ]</span><br><span class="line">    )</span><br><span class="line">    http_server = tornado.httpserver.HTTPServer(app)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure><p>使用curl请求<a href="http://localhost:8000/结果如下" target="_blank" rel="noopener">http://localhost:8000/结果如下</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> curl localhost:8000/</span></span><br><span class="line">Hi, Luna</span><br></pre></td></tr></table></figure><p>tornado建议使用Future来编写异步。</p><h2 id="创建一个异步web服务器"><a href="#创建一个异步web服务器" class="headerlink" title="创建一个异步web服务器"></a>创建一个异步web服务器</h2><ol><li>tornado支持动态路由，即通过正则匹配url传入参数到对应类中。</li><li>tornado支持二级域名，可以自动将主域名的子目录转换为二级域名。</li><li>tornado支持RESTFUL API接口，通过<code>tornado.web.RequestHandler</code>类可以看到其中提供了head, get, post, delete, patch, put操作。</li><li>tornado还支持模板语言，跟django类似，使用&#123;%&#37;}将模板语句包起来，并且控制语句跟python语句格式基本相同。</li><li>tornado也支持cookie和CSRF等操作。</li><li><strong>异步</strong>：tornado默认是单进程单线程，tornado推荐使用装饰器+Future实现Tornado异步非阻塞。</li></ol><p>tornado异步依赖两个装饰器</p><ul><li>tornado.web.asynchronous</li><li>tornado.gen.coroutine</li></ul><p><code>tornado.web.asynchronous</code>装饰器会让请求变成长连接方式，需要手动调用<code>self.finish()</code>才会响应请求。如果没有手动调用<code>self.finish()</code>该连接会一直保持pending状态。</p><p><code>tornado.gen.coroutine</code>装饰器使函数返回一个Future，在调用结束时会调用Future.set_result()将return的返回值设置到result中，内部使用fetch_coroutine调用直到无返回值为止。</p><p><code>tornado.concurrent.Future</code>提供一个<code>add_done_callback()</code>方法用来时<code>future</code>调用结束后调用回调方法。</p><p><code>tornado.gen.Task</code>用来执行一个异步任务，使用yield抛出结果。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.options</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">from</span> tornado.concurrent <span class="keyword">import</span> Future</span><br><span class="line"><span class="keyword">from</span> tornado <span class="keyword">import</span> gen</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> tornado.options <span class="keyword">import</span> define, options</span><br><span class="line">define(<span class="string">"port"</span>, default=<span class="number">8000</span>, help=<span class="string">"run on the given port"</span>, type=int)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexHandler</span><span class="params">(tornado.web.RequestHandler)</span>:</span></span><br><span class="line"><span class="meta">    @tornado.web.asynchronous</span></span><br><span class="line"><span class="meta">    @tornado.gen.coroutine</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">(self)</span>:</span></span><br><span class="line">        future = self.sleep()</span><br><span class="line">        <span class="comment"># 等同于</span></span><br><span class="line">        <span class="comment"># future = Future()</span></span><br><span class="line">        <span class="comment"># future.set_result('Luna')</span></span><br><span class="line">        future.add_done_callback(self.welcome)</span><br><span class="line">        <span class="comment"># 等同于</span></span><br><span class="line">        <span class="comment"># result = tornado.gen.Task(self.sleep)</span></span><br><span class="line">        <span class="comment"># self.write('&lt;h1&gt;Welcome %s!&lt;/h1&gt;' % result)</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 使用tornado.gen.coroutine注解来自动生成一个future。并且在future执行完后调用add_done_callback中的方法</span></span><br><span class="line"><span class="meta">    @gen.coroutine    </span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sleep</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'Luna'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">welcome</span><span class="params">(self, future)</span>:</span></span><br><span class="line">        result = future.result()</span><br><span class="line">        self.write(<span class="string">'&lt;h1&gt;Welcome %s!&lt;/h1&gt;'</span> % result)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    tornado.options.parse_command_line()</span><br><span class="line">    handlers=[</span><br><span class="line">        (<span class="string">r"/"</span>, IndexHandler)</span><br><span class="line">    ]</span><br><span class="line">    http_server = tornado.web.Application(handlers)</span><br><span class="line">    http_server.listen(options.port)</span><br><span class="line">    tornado.ioloop.IOLoop.instance().start()</span><br></pre></td></tr></table></figure><p>web上访问可以看到</p><p><img src="/uploads/images/posts/tornado/tornado1.png" alt="image"></p><p>在tornadoweb github中可以查看各种类型的demo：<a href="https://github.com/tornadoweb/tornado" target="_blank" rel="noopener">tornado</a></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Tornado 介绍&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Tornado是一个基于epoll IO复用模型的异步IO库。

tornado提供了ioloop用于支持TCP/UDP并发库，httpserver提供非阻塞Http Server。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="并发" scheme="http://www.flyl3una.cc/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Linux下systemctl脚本编写规则</title>
    <link href="http://www.flyl3una.cc/2018/06/20/Linux%E4%B8%8Bsystemctl%E8%84%9A%E6%9C%AC%E7%BC%96%E5%86%99%E8%A7%84%E5%88%99/"/>
    <id>http://www.flyl3una.cc/2018/06/20/Linux下systemctl脚本编写规则/</id>
    <published>2018-06-20T08:49:58.000Z</published>
    <updated>2018-11-02T06:13:45.536Z</updated>
    
    <content type="html"><![CDATA[<p>目前大量的Linux系统采用systemd作为系统启动方式。下面介绍使用如何编写自定义systemctl服务脚本，添加自启动服务。</p><a id="more"></a><h1 id="systemd介绍"><a href="#systemd介绍" class="headerlink" title="systemd介绍"></a>systemd介绍</h1><p><a href="http://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/index.html" target="_blank" rel="noopener">http://www.ibm.com/developerworks/cn/linux/1407_liuming_init3/index.html</a></p><h1 id="systemctl命令介绍"><a href="#systemctl命令介绍" class="headerlink" title="systemctl命令介绍"></a>systemctl命令介绍</h1><p><code>systemctl {OPTIONS} {COMMAND}</code>，可以通过systemctl –help查看详情</p><p>常用操作</p><table><thead><tr><th>操作</th><th>功能</th></tr></thead><tbody><tr><td>start</td><td>开启该服务</td></tr><tr><td>stop</td><td>停止服务</td></tr><tr><td>restart</td><td>重启服务</td></tr><tr><td>enable</td><td>使该服务开机自启动</td></tr><tr><td>disable</td><td>不让服务开机自启动</td></tr><tr><td>list-jobs</td><td>显示所有systemd服务</td></tr><tr><td>list-dependencies –after/before sshd.service</td><td>显示sshd所有依赖列表</td></tr></tbody></table><p>例如:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable nginx.service# 将nginx.service服务加入开机自启动列表，自启动脚本位于/etc/systemd/system/目录中</span><br><span class="line">systemctl start nginx.service# 开启nginx.service服务</span><br><span class="line">systemctl restart NetworkManager.service# 重启NetworkManager.service服务</span><br></pre></td></tr></table></figure><h1 id="systemctl编写规则"><a href="#systemctl编写规则" class="headerlink" title="systemctl编写规则"></a>systemctl编写规则</h1><p>例如我们要添加一个名为myserver.service的服务。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=description# 描述</span><br><span class="line"><span class="attr">After</span>=syslog.target</span><br><span class="line"><span class="attr">After</span>=network.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=forking</span><br><span class="line"></span><br><span class="line"><span class="attr">User</span>=sysadm</span><br><span class="line"><span class="attr">Group</span>=bh_watchdog</span><br><span class="line"><span class="attr">PIDFile</span>=/var/run/myserver.pid</span><br><span class="line"><span class="attr">ExecStart</span>=/usr/bin/myserver start</span><br><span class="line"><span class="attr">ExecStop</span>=/usr/bin/myserver stop</span><br><span class="line"><span class="attr">ExecReload</span>=/usr/bin/myserver restart</span><br><span class="line"><span class="attr">PrivateTmp</span>=<span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><ol><li><p>[Unit]部分主要是对该服务的一个说明，内容包括Description和After。Description用于描述服务，After用域描述服务类别。</p></li><li><p>[Server]部分是服务的关键部分，该部分用于设置运行参数。Type=forking表示该服务为后台运行的形式，User表示执行该服务的角色，Group表示执行该服务的组。PIDFile为存放PID的文件路径，ExecStart为服务的具体运行命令，ExecReload为重启命令，ExecStop为停止命令，PrivateTmp=True表示给服务分配独立的临时空间。</p><p><strong>注意</strong>:  ExecStart,ExecStop,ExecReload等命令必须跟绝对路径，不能使用相对路径。</p></li><li><p>[Install]部分为服务安装的相关设置，可设置为多用户。</p><p>按照上面编写完成脚本后，需要以644的权限保存在<code>/usr/lib/systemd/system/</code>或<code>/usr/lib/systemd/user/</code>目录下。system目录不需要用户登录即可使用，user目录下的服务必须在用户登录情况下才能使用。</p></li><li><p>使用该systemctl管理该脚本</p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> systemctl执行出错可以使用systemctl status myservice.service查找错误原因</span></span><br><span class="line">systemctl start myserver.service# 启动myserver.service服务</span><br><span class="line">systemctl stop myserver.service# 停止myserver.service服务</span><br><span class="line">systemctl restart myserver.service      # 重启myserver.service服务</span><br><span class="line">systemctl enable myserver.servcie# 将该服务添加到systemd自启动列表</span><br></pre></td></tr></table></figure><p>成功运行并且添加到自启动，从此万事大吉。服务多为守护进程。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ul><li>systemd采用CGroup来管理进程生命周期，所以服务进程可以不用进行两次fork，进程创建的所有子进程都与该服务进程同属与一个组内。</li><li>服务进程不需要维护pid文件，也不需要调用setsid()来变为会话首领</li><li>systemd提供了日志功能，服务进程输出到stderr即可。</li></ul><p><strong>注意</strong>：由于使用了CGroup来管理进程生命周期，使用结束该服务进程时，所有子进程将被结束。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前大量的Linux系统采用systemd作为系统启动方式。
下面介绍使用如何编写自定义systemctl服务脚本，添加自启动服务。&lt;/p&gt;
    
    </summary>
    
      <category term="折腾笔记" scheme="http://www.flyl3una.cc/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="Linux" scheme="http://www.flyl3una.cc/tags/Linux/"/>
    
      <category term="systemd" scheme="http://www.flyl3una.cc/tags/systemd/"/>
    
      <category term="systemctl" scheme="http://www.flyl3una.cc/tags/systemctl/"/>
    
  </entry>
  
  <entry>
    <title>vim配置</title>
    <link href="http://www.flyl3una.cc/2018/06/13/vim%E9%85%8D%E7%BD%AE/"/>
    <id>http://www.flyl3una.cc/2018/06/13/vim配置/</id>
    <published>2018-06-13T12:13:36.000Z</published>
    <updated>2018-09-12T07:06:43.559Z</updated>
    
    <content type="html"><![CDATA[<p>Linux下的文件编辑神器vim使用方法，记下此文，忘了就看看。</p><a id="more"></a><h1 id="vim常用方法"><a href="#vim常用方法" class="headerlink" title="vim常用方法"></a>vim常用方法</h1><p>安装vim</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install vim #centos</span><br><span class="line">apt-get install vim #ubuntu</span><br></pre></td></tr></table></figure><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><p>vim键位图<img src="/uploads/images/posts/vim-key.png" alt="image"></p><p>编辑模式<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">i</span>       光标处编辑</span><br><span class="line">insert  光标编辑</span><br><span class="line"><span class="selector-tag">a</span>       光标后开始编辑</span><br><span class="line">o       换行并编辑</span><br><span class="line">U       撤销编辑</span><br></pre></td></tr></table></figure></p><p>ESC退出编辑模式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:q</span>      退出文件</span><br><span class="line"><span class="selector-pseudo">:q</span>!     强制退出文件</span><br><span class="line"><span class="selector-pseudo">:w</span>      保存文件</span><br><span class="line"><span class="selector-pseudo">:wq</span>     保存并退出</span><br><span class="line"><span class="selector-pseudo">:wq</span>!    强制保存并退出文件</span><br></pre></td></tr></table></figure></p><p>快速跳转<figure class="highlight gams"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">set</span> nu  显示行号</span><br><span class="line">:num    快速跳转到第<span class="comment">num</span>行</span><br><span class="line">gg      快速跳转到首行</span><br><span class="line">G       快速跳转到尾行</span><br></pre></td></tr></table></figure></p><p>光标移动<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">j/k/l/<span class="selector-tag">i</span> 分别对应左下右上</span><br><span class="line">w       跳转到下一个单词开始位置</span><br><span class="line"><span class="selector-tag">b</span>       跳转到上一个单词开始位置</span><br><span class="line"><span class="number">0</span>       跳转到行首</span><br><span class="line">$       跳转到行尾</span><br></pre></td></tr></table></figure></p><p>复制yank<figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">y     在使用v模式选定了某一块的时候，复制选定块到缓冲区用</span><br><span class="line">yy    复制整行(nyy或者yny ，复制<span class="built_in">n</span>行，<span class="built_in">n</span>为数字)</span><br><span class="line">y^    复制当前到行头的内容； </span><br><span class="line">y$    复制当前到行尾的内容； </span><br><span class="line">yw    复制一个word(nyw或者ynw，复制<span class="built_in">n</span>个word，<span class="built_in">n</span>为数字)</span><br><span class="line">yG    复制至档尾(nyG或者ynG，复制到第<span class="built_in">n</span>行，例如<span class="number">1</span>yG或者y1G，复制到档尾)</span><br></pre></td></tr></table></figure></p><p>剪切<figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">d     剪切选定块到缓冲区； </span><br><span class="line"><span class="built_in">dd</span>    剪切整行 </span><br><span class="line">d^    剪切至行首 </span><br><span class="line">d$    剪切至行尾 </span><br><span class="line"><span class="built_in">dw</span>    剪切一个<span class="built_in">word</span> </span><br><span class="line">dG    剪切至档尾</span><br></pre></td></tr></table></figure></p><p>粘贴<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>     小写p代表贴至游标后（下），因为游标是在具体字符的位置上，所以实际是在该字符的后面 </span><br><span class="line">P     大写P代表贴至游标前（上）</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Linux下的文件编辑神器vim使用方法，记下此文，忘了就看看。&lt;/p&gt;
    
    </summary>
    
      <category term="折腾笔记" scheme="http://www.flyl3una.cc/categories/%E6%8A%98%E8%85%BE%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="vim" scheme="http://www.flyl3una.cc/tags/vim/"/>
    
  </entry>
  
  <entry>
    <title>Python创建Linux/Unix守护进程</title>
    <link href="http://www.flyl3una.cc/2018/06/13/Python%E5%88%9B%E5%BB%BALinux-Unix%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    <id>http://www.flyl3una.cc/2018/06/13/Python创建Linux-Unix守护进程/</id>
    <published>2018-06-13T06:24:47.000Z</published>
    <updated>2018-09-12T07:06:43.541Z</updated>
    
    <content type="html"><![CDATA[<p>守护进程是一种生存周期较长的一种进程，他们独立于控制终端并且周期性的执行某种任务或者等待处理某些发生的时区。他们常常在系统引导时装入启动，在系统关闭时终止。大多数服务器都是用守护进程实现的，例如inetd,mysqld等。最后的d表示该进程为守护进程。</p><a id="more"></a><h1 id="守护进程原理"><a href="#守护进程原理" class="headerlink" title="守护进程原理"></a>守护进程原理</h1><h2 id="守护进程特点"><a href="#守护进程特点" class="headerlink" title="守护进程特点"></a>守护进程特点</h2><p>守护进程与后台进程区别：</p><ul><li>后台运行程序，即加&amp;启动的程序</li><li>后台运行的程序拥有控制终端，守护进程没有</li></ul><h2 id="编写规则"><a href="#编写规则" class="headerlink" title="编写规则"></a>编写规则</h2><ol><li>调用umask将文件模式创建屏蔽字设置为0。</li><li>调用fork，然后使父进程退出，这样可以避免控制终端将Daemon放入后台执行。</li><li>调用setsid创建一个新绘画，这样可以将调用进程设置为新会话的首进程，成为一个新进程组的组长进程，没有控制终端。</li><li>将当前工作目录更改为跟目录，进程活动时，其工作目录所在的文件系统不能卸下。一般需要设置为跟妈目录。</li><li>关闭不在需要的文件描述符。进程从父进程哪里继承了打开的文件描述符。如不关闭，将会浪费系统资源，造成文件无法正确关闭等无法预知的错误。</li><li>某些守护进程打开/dev/null使其具有文件描述符0,1,2。使得任何一个试图读写标准输入、输出、标准出错的进程都不会产生任何效果。</li><li>处理SIGCHILD信号，处理SIGCHILD信号不是必须的，但是某些进程中，特别是服务器进程往往在请求到来时生成子进程处理请求。如果父进程不等待子进程结束，子进程将成为僵尸进程从而占用系统资源。父进程等待子进程结束会增大父进程负担，影响服务器并发性能。Linux下可以简单的讲SIGCHILD信号操作设置为SIG_IGN。</li><li>在控制终端输入<code>ps -axj</code>命令可以查看守护进程的信息。</li><li>守护进程没有控制终端，不能将错误写到标准输出上，大多数进程使用集中的守护进程出错syslog设施，该设施的接口时syslog函数。大多数syslog实现将使消息多时间处于队列中，如果此时间到达了重复消息，那么syslog进程将不会把他写到日志记录中，而是打印输出重复消息。</li></ol><h2 id="编写惯例"><a href="#编写惯例" class="headerlink" title="编写惯例"></a>编写惯例</h2><p>守护进程使用锁文件通常存放在/var/run目录中；</p><p>若支持配置，通常房在/etc目录中；</p><p>守护进程可以用命令行启动，通常是系统初始化脚本；</p><p>如果守护进程有配置文件，那么读取文件后一般不会再查看它。</p><blockquote><p>创建守护进程需要使用两次fork，第一次fork目的使保证调用setsid的调用进程不是进程组长。(setsid函数使实现于控制终端脱离的唯一方法)；setsid函数使进程成为新会话头河进程组长，并于控制终端断开链接；第二次调用fork目的使：即使守护进程将来打开一个终端设备，也不会自动获得控制终端。这样可以保证这次生成的进程不再是一个会话头。忽略SIGHUP信号的原因使，当第一次生成的子进程终止时，该会话中所有进程都会收到该信号。</p></blockquote><h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># daemon.py</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> atexit</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">daemonize</span><span class="params">(pidfile, *, stdin=<span class="string">'/dev/null'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                          stdout=<span class="string">'/dev/null'</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                          stderr=<span class="string">'/dev/null'</span>)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(pidfile):</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'Already running'</span>)</span><br><span class="line">    print(<span class="string">'daemon starting...'</span>)</span><br><span class="line">    <span class="comment"># First fork (detaches from parent)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.fork() &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> SystemExit(<span class="number">0</span>)   <span class="comment"># Parent exit</span></span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'fork #1 failed.'</span>)</span><br><span class="line"></span><br><span class="line">    os.chdir(<span class="string">'/'</span>)</span><br><span class="line">    os.umask(<span class="number">0</span>)</span><br><span class="line">    os.setsid()</span><br><span class="line">    <span class="comment"># Second fork (relinquish session leadership)</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> os.fork() &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">raise</span> SystemExit(<span class="number">0</span>)</span><br><span class="line">    <span class="keyword">except</span> OSError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">'fork #2 failed.'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Flush I/O buffers</span></span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    sys.stderr.flush()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Replace file descriptors for stdin, stdout, and stderr</span></span><br><span class="line">    <span class="keyword">with</span> open(stdin, <span class="string">'rb'</span>, <span class="number">0</span>) <span class="keyword">as</span> f:</span><br><span class="line">        os.dup2(f.fileno(), sys.stdin.fileno())</span><br><span class="line">    <span class="keyword">with</span> open(stdout, <span class="string">'ab'</span>, <span class="number">0</span>) <span class="keyword">as</span> f:</span><br><span class="line">        os.dup2(f.fileno(), sys.stdout.fileno())</span><br><span class="line">    <span class="keyword">with</span> open(stderr, <span class="string">'ab'</span>, <span class="number">0</span>) <span class="keyword">as</span> f:</span><br><span class="line">        os.dup2(f.fileno(), sys.stderr.fileno())</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Write the PID file</span></span><br><span class="line">    <span class="keyword">with</span> open(pidfile,<span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        print(os.getpid(),file=f)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Arrange to have the PID file removed on exit/signal</span></span><br><span class="line">    atexit.register(<span class="keyword">lambda</span>: os.remove(pidfile))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Signal handler for termination (required)</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sigterm_handler</span><span class="params">(signo, frame)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    signal.signal(signal.SIGTERM, sigterm_handler)</span><br><span class="line">    print(<span class="string">'daemon started.'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span><span class="params">(pidfile, stdin=<span class="string">'/dev/null'</span>, stdout=<span class="string">'/dev/null'</span>, stderr=<span class="string">'/dev/null'</span>)</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    开启守护进程</span></span><br><span class="line"><span class="string">    :return:</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        daemonize(PIDFILE,</span><br><span class="line">            stdout=stdout,</span><br><span class="line">            stderr=stderr)</span><br><span class="line">    <span class="keyword">except</span> RuntimeError <span class="keyword">as</span> e:</span><br><span class="line">        print(e, file=sys.stderr)</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="number">1</span>)</span><br><span class="line">    run()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">stop</span><span class="params">(pidfile)</span>:</span></span><br><span class="line">    <span class="keyword">if</span> os.path.exists(pidfile):</span><br><span class="line">        <span class="keyword">with</span> open(pidfile, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            pid = f.readline().strip()</span><br><span class="line">        <span class="keyword">if</span> pid:</span><br><span class="line">            os.kill(int(pid), signal.SIGTERM)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Not running'</span>, file=sys.stderr)</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">4</span>):</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(pidfile):</span><br><span class="line">            time.sleep(<span class="number">0.5</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(pidfile):</span><br><span class="line">            os.remove(pidfile)</span><br><span class="line">    print(<span class="string">'daemon stop.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">restart</span><span class="params">(pidfile)</span>:</span></span><br><span class="line">    stop(pidfile)</span><br><span class="line">    start(pidfile)</span><br><span class="line">    print(<span class="string">'daemon restart.'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">import</span> time</span><br><span class="line">    sys.stdout.write(<span class="string">'Daemon started with pid &#123;&#125;\n'</span>.format(os.getpid()))</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        sys.stdout.write(<span class="string">'Daemon Alive! &#123;&#125;\n'</span>.format(time.ctime()))</span><br><span class="line">        time.sleep(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    PIDFILE = <span class="string">'/var/run/daemon/testd.pid'</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">        print(<span class="string">'Usage: &#123;&#125; [start|stop|restart]'</span>.format(sys.argv[<span class="number">0</span>]), file=sys.stderr)</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="number">1</span>)</span><br><span class="line">    arg = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> arg == <span class="string">'start'</span>:</span><br><span class="line">        start(PIDFILE, stdout=<span class="string">'/tmp/daemon.log'</span>, stderr=<span class="string">'/tmp/daemon.log'</span>)</span><br><span class="line">    <span class="keyword">elif</span> arg == <span class="string">'stop'</span>:</span><br><span class="line">        stop(PIDFILE)</span><br><span class="line">    <span class="keyword">elif</span> arg == <span class="string">'restart'</span>:</span><br><span class="line">        restart(PIDFILE)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">'Unknown command &#123;!r&#125;'</span>.format(sys.argv[<span class="number">1</span>]), file=sys.stderr)</span><br><span class="line">        <span class="keyword">raise</span> SystemExit(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">daemon<span class="selector-class">.py</span> start</span><br><span class="line">cat /var/run/daemon/testd.pid</span><br><span class="line"><span class="number">2882</span></span><br><span class="line">tail -f /tmp/daemon.log</span><br><span class="line">Daemon started with pid <span class="number">2882</span></span><br><span class="line">Daemon Alive! Fri Oct <span class="number">12</span> <span class="number">13</span>:<span class="number">45</span>:<span class="number">37</span> <span class="number">2012</span></span><br><span class="line">Daemon Alive! Fri Oct <span class="number">12</span> <span class="number">13</span>:<span class="number">45</span>:<span class="number">47</span> <span class="number">2012</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>一旦进程被正确分离，他会重新初始化标准I/O流执行用户指定的文件。简单的关闭<code>sys.stdout</code>并重新指定是不行的，因为不知道它是否全部都是用的<code>sys.stdout</code></p><p><code>atexit.register()</code>注册了一个函数在Python解释器终止时执行。对于一个SIGTERM信号处理的定义同样需要被优雅的关闭。信号处理器简单的抛出了SystemExit()异常。如果没有该异常，终止信号会使不执行<code>atexit.register()</code>注册的清理操作的时候就杀掉解释器。</p><h1 id="使用python-daemon"><a href="#使用python-daemon" class="headerlink" title="使用python-daemon"></a>使用python-daemon</h1><p>github地址:<a href="https://github.com/serverdensity/python-daemon" target="_blank" rel="noopener">python-daemon</a></p><p>下载该daemon文件。</p><p>创建新自己的类继承<code>daemon</code>。</p><p>样例如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MDaemon</span><span class="params">(Daemon)</span>:</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        super(MDaemon, self).__init__(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(sys._getframe().f_lineno, <span class="string">'run...'</span>)</span><br><span class="line">        <span class="comment"># 重写该run方法，将守护进程需要执行的事务放在此处。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> len(sys.argv) != <span class="number">2</span>:</span><br><span class="line">print(<span class="string">"Usage param &#123;start|stop|restart&#125;"</span>)</span><br><span class="line"><span class="keyword">raise</span> SystemExit(<span class="number">0</span>)</span><br><span class="line">arg = sys.argv[<span class="number">1</span>]</span><br><span class="line"><span class="keyword">if</span> arg <span class="keyword">in</span> (<span class="string">'start'</span>, <span class="string">'stop'</span>, <span class="string">'restart'</span>):</span><br><span class="line">d = MDaemon(pidfile=<span class="string">'/var/run/mdaemon.pid'</span>, stdout=<span class="string">'/var/log/mdaemon.log'</span>, stderr=<span class="string">'/var/log/mdaemon.log'</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">getattr(d, arg)()</span><br><span class="line"><span class="keyword">except</span> KeyError <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">print(e)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;守护进程是一种生存周期较长的一种进程，他们独立于控制终端并且周期性的执行某种任务或者等待处理某些发生的时区。他们常常在系统引导时装入启动，在系统关闭时终止。大多数服务器都是用守护进程实现的，例如inetd,mysqld等。最后的d表示该进程为守护进程。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="Linux" scheme="http://www.flyl3una.cc/tags/Linux/"/>
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="守护进程" scheme="http://www.flyl3una.cc/tags/%E5%AE%88%E6%8A%A4%E8%BF%9B%E7%A8%8B/"/>
    
      <category term="Unix" scheme="http://www.flyl3una.cc/tags/Unix/"/>
    
  </entry>
  
  <entry>
    <title>Python2 Gevent</title>
    <link href="http://www.flyl3una.cc/2018/06/06/python2%E5%BC%82%E6%AD%A5gevent/"/>
    <id>http://www.flyl3una.cc/2018/06/06/python2异步gevent/</id>
    <published>2018-06-06T14:36:47.000Z</published>
    <updated>2018-09-12T07:06:43.553Z</updated>
    
    <content type="html"><![CDATA[<p>Gevent是一个基于libv的实现的一个python2协程并发库。<a id="more"></a></p><h1 id="0x01-协程-coroutine"><a href="#0x01-协程-（Coroutine）" class="headerlink" title="0x01 协程 （Coroutine）"></a>0x01 协程 （Coroutine）</h1><p>协程是一个轻量级线程，又叫微线程、纤程。</p><ol><li>线程是计算机的最小执行单位，多线程程序在执行并发任务时是由CPU调度线程执行流程。</li><li>协程执行起来像是多线程，但却只有一个线程，共享资源不需要多线程的锁机制，执行效率比线程高。</li><li>协程是由一个进程执行，利用多核CPU最好采用多进程+协程。</li></ol><h1 id="0x02-gevent核心"><a href="#0x02-Gevent核心" class="headerlink" title="0x02 Gevent核心"></a>0x02 Gevent核心</h1><p>gevent使用的主要模式时Greenlet，它以C扩展加python轻量级协程模式工作。Greenlet全部运行在主程序操作系统内部。</p><p><strong>注意</strong>：在任何时刻，只有一个协程在运行。</p><p>协程的调度和multiprocess，threading等提供真正并行结构的库不同。这些库是真正的并行运行。</p><h2 id="0x03-同步和异步"><a href="#0x03-同步和异步" class="headerlink" title="0x03 同步和异步"></a>0x03 同步和异步</h2><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><ol><li>gevent.spawn()用来创建一个协程对象。</li><li>gevent.joinall()用来等来所有协程执行完毕。跟线程的join类似。</li><li>gevent.sleep()用来让协程睡眠挂起。</li></ol><p>在python语法中，通过yield来切换协程。而在gevent里，上下文切换通过yielding来完成。</p><p>gevent.sleep(0)可以发出一个yielding信号来切换协程。</p><p>下面看一个示例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#! /usr/bin/python3.6</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gevent</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Running in foo'</span>)</span><br><span class="line">    gevent.sleep(<span class="number">0</span>)</span><br><span class="line">    print(<span class="string">'Explicit context seitch to foo again'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'Explicit context to bar'</span>)</span><br><span class="line">    gevent.sleep(<span class="number">0</span>)</span><br><span class="line">    print(<span class="string">'Implicit context switch back to bar'</span>)</span><br><span class="line"></span><br><span class="line">gevent.joinall([</span><br><span class="line">    gevent.spawn(foo),</span><br><span class="line">    gevent.spawn(bar),</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>运行结果如下</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Running <span class="keyword">in</span> foo</span><br><span class="line">Explicit context to bar</span><br><span class="line">Explicit context seitch to foo again</span><br><span class="line"><span class="keyword">Implicit</span> context switch back to bar</span><br></pre></td></tr></table></figure><p>可以看到foo和bar函数是并行运行的。</p><ol start="4"><li>gevent.spawn(func, *args)传入参数，第一个为调用函数名，args为func需要的参数。</li></ol><h2 id="greenlet状态"><a href="#Greenlet状态" class="headerlink" title="Greenlet状态"></a>Greenlet状态</h2><p>就像任何其他成段代码，Greenlet也可能以不同的方式运行失败。 Greenlet可能未能成功抛出异常，不能停止运行，或消耗了太多的系统资源。</p><p>一个greenlet的状态通常是一个依赖于时间的参数。在greenlet中有一些标志， 让你可以监视它的线程内部状态：</p><ul><li><code>started</code> – Boolean, 指示此Greenlet是否已经启动</li><li><code>ready()</code> – Boolean, 指示此Greenlet是否已经停止</li><li><code>successful()</code> – Boolean, 指示此Greenlet是否已经停止而且没抛异常</li><li><code>value</code> – 任意值, 此Greenlet代码返回的值</li><li><code>exception</code> – 异常, 此Greenlet内抛出的未捕获异常</li></ul><h2 id="程序停止"><a href="#程序停止" class="headerlink" title="程序停止"></a>程序停止</h2><p>当主程序收到一个SIGOUT信号时，不能成功的做yield操作可能会意外的挂起程序执行，这会导致产生僵尸进程，他需要在python解释器之外被kill掉。</p><p>通用的解决此问题的模式就是在主程序中监听一个SIGOUT信号，在程序退出时调用gevent.shutdown。</p><h2 id="猴子补丁monkey-pathing"><a href="#猴子补丁（Monkey-pathing）" class="headerlink" title="猴子补丁（Monkey pathing）"></a>猴子补丁（Monkey pathing）</h2><p>猴子补丁使用<code>monkey.path_socket()</code>这个方法即可改变python标准库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line">print(socket.socket)</span><br><span class="line"></span><br><span class="line">print(<span class="string">"After monkey patch"</span>)</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> monkey</span><br><span class="line">monkey.patch_socket()</span><br><span class="line">print(socket.socket)</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> select</span><br><span class="line">print(select.select)</span><br><span class="line">monkey.patch_select()</span><br><span class="line">print(<span class="string">"After monkey patch"</span>)</span><br><span class="line">print(select.select)</span><br></pre></td></tr></table></figure><p>python运行环境允许在运行时修改大部分对象，类，函数，包括模块。随意修改基础环境会带来很多“隐式的副作用”，出现这些问题极难调试。在极端的情况下必须修改python基础库式，可以使用猴子补丁。gevent能够修改标准库里大部分阻塞式系统调用，包括socket，ssl，threading，select等模块，让他们变为协作式运行。</p><p><strong>注意</strong>：所有基于协程的并发都不能使用<code>sleep()</code>函数，<code>sleep()</code>函数会阻塞整个线程，应该使用协程库自带的睡眠函数。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p><a href="http://ningning.today/gevent-tutorial-cn/" target="_blank" rel="noopener">Gevent 程序员指南</a></p><p><a href="http://www.gevent.org/contents.html" target="_blank" rel="noopener">gevent官方文档</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Gevent是一个基于libv的实现的一个python2协程并发库。
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="并发" scheme="http://www.flyl3una.cc/tags/%E5%B9%B6%E5%8F%91/"/>
    
      <category term="gevent" scheme="http://www.flyl3una.cc/tags/gevent/"/>
    
      <category term="协程" scheme="http://www.flyl3una.cc/tags/%E5%8D%8F%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python3异步IO</title>
    <link href="http://www.flyl3una.cc/2018/06/05/Python3%E5%BC%82%E6%AD%A5IO/"/>
    <id>http://www.flyl3una.cc/2018/06/05/Python3异步IO/</id>
    <published>2018-06-05T14:08:39.000Z</published>
    <updated>2018-10-11T09:26:26.338Z</updated>
    
    <content type="html"><![CDATA[<p>asyncio是python3.4后引入的标准库。内置了对异步IO的支持。 </p><p>python3.5还引入了async和await使asyncio更容易使用。</p><a id="more"></a><h1 id="asyncio-基础"><a href="#asyncio-基础" class="headerlink" title="asyncio 基础"></a>asyncio 基础</h1><ol><li>asyncio编程模式是一个消息循环，从asyncio模块中取出一个EventLoop的引用，然后把需要执行的协程放到EventLoop中执行，就实现了IO。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello world!"</span>)</span><br><span class="line">    <span class="comment"># 异步调用asyncio.sleep(1):</span></span><br><span class="line">    r = <span class="keyword">yield</span> <span class="keyword">from</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Hello again!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取EventLoop:</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 执行coroutine</span></span><br><span class="line">loop.run_until_complete(hello())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>执行结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Hello world!</span><br><span class="line"><span class="meta">#</span><span class="bash"> 等待1秒</span></span><br><span class="line">Hello again!</span><br></pre></td></tr></table></figure><p><a href="mailto:`@asyncio.coroutine" target="_blank" rel="noopener">`@asyncio.coroutine</a><code>注解表示</code>hello()`函数为一个协程函数。</p><p>使用<code>asyncio.sleep()</code>可以让协程睡眠，EventLoop则会切换到其他协程继续执行达到异步效果。</p><ol start="2"><li><code>asyncio.open_connection()</code>异步网络连接</li></ol><p><code>open_connection()</code>语法如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open_connection(host=<span class="keyword">None</span>, port=<span class="keyword">None</span>, *, loop=<span class="keyword">None</span>, limit=<span class="number">65536</span>, **kwds)</span><br></pre></td></tr></table></figure><ul><li>host: 服务器域名</li><li>port: 服务器端口</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="meta">@asyncio.coroutine</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">wget</span><span class="params">(host)</span>:</span></span><br><span class="line">    print(<span class="string">'wget %s...'</span> % host)</span><br><span class="line">    connect = asyncio.open_connection(host, <span class="number">80</span>)</span><br><span class="line">    reader, writer = <span class="keyword">yield</span> <span class="keyword">from</span> connect</span><br><span class="line">    header = <span class="string">'GET / HTTP/1.0\r\nHost: %s\r\n\r\n'</span> % host</span><br><span class="line">    writer.write(header.encode(<span class="string">'utf-8'</span>))</span><br><span class="line">    <span class="keyword">yield</span> <span class="keyword">from</span> writer.drain()</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        line = <span class="keyword">yield</span> <span class="keyword">from</span> reader.readline()</span><br><span class="line">        <span class="keyword">if</span> line == <span class="string">b'\r\n'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        print(<span class="string">'%s header &gt; %s'</span> % (host, line.decode(<span class="string">'utf-8'</span>).rstrip()))</span><br><span class="line">    <span class="comment"># Ignore the body, close the socket</span></span><br><span class="line">    writer.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">tasks = [wget(host) <span class="keyword">for</span> host <span class="keyword">in</span> [<span class="string">'www.sina.com.cn'</span>, <span class="string">'www.sohu.com'</span>, <span class="string">'www.163.com'</span>]]</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>结果</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">wget www<span class="selector-class">.sohu</span><span class="selector-class">.com</span>...</span><br><span class="line">wget www<span class="selector-class">.sina</span><span class="selector-class">.com</span><span class="selector-class">.cn</span>...</span><br><span class="line">wget www.<span class="number">163</span><span class="selector-class">.com</span>...</span><br><span class="line">(等待一段时间)</span><br><span class="line">(打印出sohu的header)</span><br><span class="line">www<span class="selector-class">.sohu</span><span class="selector-class">.com</span> <span class="selector-tag">header</span> &gt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">www<span class="selector-class">.sohu</span><span class="selector-class">.com</span> <span class="selector-tag">header</span> &gt; Content-Type: text/html</span><br><span class="line">...</span><br><span class="line">(打印出sina的header)</span><br><span class="line">www<span class="selector-class">.sina</span><span class="selector-class">.com</span><span class="selector-class">.cn</span> <span class="selector-tag">header</span> &gt; HTTP/<span class="number">1.1</span> <span class="number">200</span> OK</span><br><span class="line">www<span class="selector-class">.sina</span><span class="selector-class">.com</span><span class="selector-class">.cn</span> <span class="selector-tag">header</span> &gt; Date: Wed, <span class="number">20</span> May <span class="number">2015</span> <span class="number">04</span>:<span class="number">56</span>:<span class="number">33</span> GMT</span><br><span class="line">...</span><br><span class="line">(打印出<span class="number">163</span>的header)</span><br><span class="line">www.<span class="number">163</span><span class="selector-class">.com</span> <span class="selector-tag">header</span> &gt; HTTP/<span class="number">1.0</span> <span class="number">302</span> Moved Temporarily</span><br><span class="line">www.<span class="number">163</span><span class="selector-class">.com</span> <span class="selector-tag">header</span> &gt; Server: Cdn Cache Server V2.<span class="number">0</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>此为3个连接由一个线程通过coroutine并发完成。</p><h1 id="asyncawait"><a href="#async-await" class="headerlink" title="async/await"></a>async/await</h1><p><code>async</code>和<code>await</code>是python3.5后引入的新语法。原本定义协程函数使用<a href="mailto:`@asyncio.coroutine" target="_blank" rel="noopener">`@asyncio.coroutine</a><code>注解，现在只需要在函数定义前加上</code>async`即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"Hello world!"</span>)</span><br><span class="line">    r = <span class="keyword">await</span> asyncio.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Hello again!"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取EventLoop:</span></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="comment"># 执行coroutine</span></span><br><span class="line">loop.run_until_complete(hello())</span><br><span class="line">loop.close()</span><br></pre></td></tr></table></figure><p>可以发现使用<code>async/awati</code>代码更加易读简洁。</p><h1 id="aiohttp"><a href="#aiohttp" class="headerlink" title="aiohttp"></a>aiohttp</h1><p><code>syncio</code>可以实现单线程并发IO操作，asyncio实现了TCP/UDP/SSL等协议，aiohttp则是基于asyncio实现的HTTP框架。</p><p>安装<code>aiohttp</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install aiohttp</span><br></pre></td></tr></table></figure><p>实例为一个HTTP服务器，可以处理<code>/</code>和<code>/hello/{name}</code>路由</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">from</span> aiohttp <span class="keyword">import</span> web</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(request)</span>:</span></span><br><span class="line">    <span class="comment"># 返回一个web响应</span></span><br><span class="line">    <span class="keyword">return</span> web.Response(body=<span class="string">b'&lt;h1&gt;Index&lt;/h1&gt;'</span>, content_type=<span class="string">'text/html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">hello</span><span class="params">(request)</span>:</span></span><br><span class="line">    text = <span class="string">'&lt;h1&gt;hello, %s&lt;/h1&gt;'</span> % request.match_info[<span class="string">'name'</span>]</span><br><span class="line">    <span class="keyword">return</span> web.Response(body=text.encode(<span class="string">'utf8'</span>), content_type=<span class="string">'text/html'</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">init</span><span class="params">(loop)</span>:</span></span><br><span class="line">    <span class="comment"># 创建一个web容器</span></span><br><span class="line">    app = web.Application(loop=loop)</span><br><span class="line">    <span class="comment"># 添加web路由</span></span><br><span class="line">    app.router.add_route(<span class="string">'GET'</span>, <span class="string">'/'</span>, index)</span><br><span class="line">    app.router.add_route(<span class="string">'GET'</span>, <span class="string">'/hello/&#123;name&#125;'</span>, hello)</span><br><span class="line">    <span class="comment"># 绑定监听地址并创建web服务</span></span><br><span class="line">    srv = <span class="keyword">await</span> loop.create_server(app.make_handler(), <span class="string">'127.0.0.1'</span>, <span class="number">8000</span>)</span><br><span class="line">    <span class="keyword">return</span> srv</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(init(loop))</span><br><span class="line">loop.run_forever()</span><br></pre></td></tr></table></figure><p>这样既实现了一个简单的web服务器</p><h1 id="在asyncio中使用阻塞函数"><a href="#在asyncio中使用阻塞函数" class="headerlink" title="在asyncio中使用阻塞函数"></a>在asyncio中使用阻塞函数</h1><p>在程序中包含大量的阻塞函数，我们不能把所有的阻塞函数改为异步操作。而阻塞函数会使协程的流程阻塞掉，从而变成同步操作。</p><h2 id="run_in_executor方法"><a href="#run-in-executor-方法" class="headerlink" title="run_in_executor()方法"></a>run_in_executor()方法</h2><p>我们可以使用<code>run_in_executor()</code>方法来调用操作。<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AbstractEventLoop.run_in_executor(executor, func, *args)</span><br></pre></td></tr></table></figure></p><ul><li>executor 参数应该是一个 Executor 实例。如果为 None，则使用默认 executor。</li><li>func 就是要执行的函数</li><li>args 就是传递给 func 的参数</li></ul><p>使用事件循环的<code>run_in_executor()</code>方法，asyncio的事件循环在背后维护着一个<code>ThreadPoolExecutor</code>对象，我们可以调用<code>run_in_executor</code>方法，把我们要执行的操作发给它，让事件循环来维护我们的耗时操作。</p><p>下列实例使用time.sleep()来作为阻塞函数<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(event)</span>:</span></span><br><span class="line">    print(<span class="string">"start:"</span>, event)</span><br><span class="line">    loop = asyncio.get_event_loop()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        delay_time = random.randint(<span class="number">0</span>, <span class="number">20</span>) / <span class="number">10.0</span></span><br><span class="line">        <span class="comment"># await loop.run_in_executor(None, time.sleep, delay_time)</span></span><br><span class="line">        executor = futures.ThreadPoolExecutor(max_workers=<span class="number">20</span>)</span><br><span class="line">        <span class="keyword">await</span> loop.run_in_executor(executor, time.sleep, delay_time)</span><br><span class="line">        <span class="comment"># executor.submit(self.do_task, task)</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        print(e)</span><br><span class="line">    print(<span class="string">"use time:"</span>, delay_time, <span class="string">"stop:"</span>, event)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">url_list = [<span class="string">"aaa"</span>, <span class="string">"bbb"</span>, <span class="string">"ccc"</span>, <span class="string">"ddd"</span>, <span class="string">"eee"</span>, <span class="string">"fff"</span>]</span><br><span class="line">tasks = [asyncio.ensure_future(run(url)) <span class="keyword">for</span> url <span class="keyword">in</span> url_list]</span><br><span class="line">start_time = datetime.datetime.now()</span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line">loop.run_until_complete(asyncio.wait(tasks))</span><br><span class="line">stop_time = datetime.datetime.now()</span><br><span class="line">print(<span class="string">"use all time:"</span>, stop_time - start_time)</span><br></pre></td></tr></table></figure></p><p>运行结果，可以看出所有协程的time.sleep一共耗费1.8秒时间<figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">start</span>: aaa</span><br><span class="line"><span class="keyword">start</span>: bbb</span><br><span class="line"><span class="keyword">start</span>: ccc</span><br><span class="line"><span class="keyword">start</span>: ddd</span><br><span class="line"><span class="keyword">start</span>: eee</span><br><span class="line"><span class="keyword">start</span>: fff</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">0.0</span> <span class="keyword">stop</span>: fff</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">0.7</span> <span class="keyword">stop</span>: aaa</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">1.0</span> <span class="keyword">stop</span>: ddd</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">1.1</span> <span class="keyword">stop</span>: eee</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">1.3</span> <span class="keyword">stop</span>: bbb</span><br><span class="line"><span class="keyword">use</span> <span class="keyword">time</span>: <span class="number">1.8</span> <span class="keyword">stop</span>: ccc</span><br><span class="line"><span class="keyword">use</span> all <span class="keyword">time</span>: <span class="number">0</span>:<span class="number">00</span>:<span class="number">01.804283</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;asyncio是python3.4后引入的标准库。内置了对异步IO的支持。 &lt;/p&gt;
&lt;p&gt;python3.5还引入了async和await使asyncio更容易使用。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="异步IO" scheme="http://www.flyl3una.cc/tags/%E5%BC%82%E6%AD%A5IO/"/>
    
      <category term="并发" scheme="http://www.flyl3una.cc/tags/%E5%B9%B6%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>Python socket网络编程</title>
    <link href="http://www.flyl3una.cc/2018/06/05/python%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>http://www.flyl3una.cc/2018/06/05/python网络编程/</id>
    <published>2018-06-05T09:12:07.000Z</published>
    <updated>2018-09-12T07:06:43.558Z</updated>
    
    <content type="html"><![CDATA[<p>所有语言的socket编程流程基本一致。都是服务端创建套接字，绑定端口，监听端口，接收套接字连接，分发连接到其他线程处理。客户端创建套接字，连接服务端，收发数据。</p><a id="more"></a><h1 id="tcp"><a href="#TCP" class="headerlink" title="TCP"></a>TCP</h1><p>下面来看一个简单的TCP服务端客户端通信程序。</p><p>服务端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> asyncio</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">def</span> <span class="title">work</span><span class="params">(sock, addr)</span>:</span></span><br><span class="line">    print(<span class="string">'Accept new connection from %s:%s...'</span> % addr)</span><br><span class="line">    sock.send(<span class="string">b'Welcome!'</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        data = sock.recv(<span class="number">1024</span>)</span><br><span class="line">        time.sleep(<span class="number">0.01</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> data <span class="keyword">or</span> data.decode(<span class="string">'utf8'</span>) == <span class="string">'quit'</span>:</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        sock.send((<span class="string">'Hello, %s!'</span> % data.decode(<span class="string">'utf8'</span>)).encode(<span class="string">'utf8'</span>))</span><br><span class="line">    sock.close()</span><br><span class="line">    print(<span class="string">'Connection from %s:%s closed'</span> % addr)</span><br><span class="line"></span><br><span class="line">loop = asyncio.get_event_loop()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    s.bind((<span class="string">'127.0.0.1'</span>, <span class="number">10011</span>))</span><br><span class="line">    s.listen(<span class="number">5</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">        sock, addr = s.accept()</span><br><span class="line">        loop.run_until_complete(work(sock, addr))</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    print(e)</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    loop.close()</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"></span><br><span class="line">chars = <span class="string">'qwertyuiikhfsfgxcvcbnm'</span></span><br><span class="line"></span><br><span class="line">length = len(chars)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">()</span>:</span></span><br><span class="line">    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">    sock.connect((<span class="string">'127.0.0.1'</span>, <span class="number">10011</span>))</span><br><span class="line">    data = sock.recv(<span class="number">1024</span>).decode(<span class="string">'utf8'</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">        start = (i + random.randint(<span class="number">0</span>, length)) % length</span><br><span class="line">        data = chars[start: (start+<span class="number">4</span>) % length]</span><br><span class="line">        sock.send(data.encode(<span class="string">'utf8'</span>))</span><br><span class="line">        print(sock.recv(<span class="number">1024</span>).decode(<span class="string">'utf8'</span>))</span><br><span class="line">    sock.send(<span class="string">b'quit'</span>)</span><br><span class="line">    sock.close()</span><br><span class="line"></span><br><span class="line">clients = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">3</span>):</span><br><span class="line">    t = threading.Thread(target=client)</span><br><span class="line">    t.start()</span><br><span class="line">    clients.append(t)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> clients:</span><br><span class="line">    i.join()</span><br></pre></td></tr></table></figure><p>运行结果</p><p>服务端</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Accept new<span class="built_in"> connection </span><span class="keyword">from</span> 127.0.0.1:62178<span class="built_in">..</span>.</span><br><span class="line">Connection <span class="keyword">from</span> 127.0.0.1:62178 closed</span><br><span class="line">Accept new<span class="built_in"> connection </span><span class="keyword">from</span> 127.0.0.1:62179<span class="built_in">..</span>.</span><br><span class="line">Connection <span class="keyword">from</span> 127.0.0.1:62179 closed</span><br><span class="line">Accept new<span class="built_in"> connection </span><span class="keyword">from</span> 127.0.0.1:62180<span class="built_in">..</span>.</span><br><span class="line">Connection <span class="keyword">from</span> 127.0.0.1:62180 closed</span><br></pre></td></tr></table></figure><p>客户端</p><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Hello,</span> gxcv!</span><br><span class="line"><span class="built_in">Hello,</span> erty!</span><br><span class="line"><span class="built_in">Hello,</span> wert!</span><br><span class="line"><span class="built_in">Hello,</span> iikh!</span><br><span class="line"><span class="built_in">Hello,</span> rtyu!</span><br><span class="line"><span class="built_in">Hello,</span> ikhf!</span><br><span class="line"><span class="built_in">Hello,</span> fsfg!</span><br><span class="line"><span class="built_in">Hello,</span> tyui!</span><br><span class="line"><span class="built_in">Hello,</span> iikh!</span><br></pre></td></tr></table></figure><p>可以看到由于采用了并发模式，通信的数据是乱序的。</p><h1 id="udp"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h1><p>UDP流程跟上面TCP类似。</p><ol><li>创建UDP套接字</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s = socket.socket(socket.AF_IENT, socket.SOCK_DGRAM)</span><br></pre></td></tr></table></figure><ol start="2"><li>接收数据：UDP套接字接收不仅可以使用<code>recv</code>函数，还可以使用<code>recvfrom</code>函数。<code>recvfrom</code>函数可以返回客户端的地址与端口。</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data, addr = s.recvfrom(<span class="number">1024</span>)</span><br></pre></td></tr></table></figure><ol><li>发送数据：UDP套接字发送数据不适用<code>send</code>函数，而使用<code>sendto</code>函数，</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s.sendto(data, (<span class="string">'127.0.0.1'</span>, <span class="number">10011</span>))</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>TCP基于长连接的，稳定可靠。UDP是协议传输，不稳定。</p><p>注意：<code>recv</code>与<code>recvfrom</code>都是阻塞函数。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;所有语言的socket编程流程基本一致。都是服务端创建套接字，绑定端口，监听端口，接收套接字连接，分发连接到其他线程处理。客户端创建套接字，连接服务端，收发数据。&lt;/p&gt;
    
    </summary>
    
      <category term="编程基础" scheme="http://www.flyl3una.cc/categories/%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    
    
      <category term="python" scheme="http://www.flyl3una.cc/tags/python/"/>
    
      <category term="socket" scheme="http://www.flyl3una.cc/tags/socket/"/>
    
      <category term="TCP" scheme="http://www.flyl3una.cc/tags/TCP/"/>
    
      <category term="UDP" scheme="http://www.flyl3una.cc/tags/UDP/"/>
    
      <category term="网络编程" scheme="http://www.flyl3una.cc/tags/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
</feed>
